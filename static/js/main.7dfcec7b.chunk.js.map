{"version":3,"sources":["types/Direction.ts","components/GridCell/GridCell.tsx","components/GridRow/GridRow.tsx","components/Grid/Grid.tsx","components/MachineLearning/Algorithm.tsx","components/GameLogic/GameFunctions.ts","components/GameLogic/GameLogic.tsx","components/GameUI/ParameterInput.tsx","components/Card/Card.tsx","components/GameUI/GameOverModal/GameOverModal.tsx","components/GameUI/TabButton/TabButton.tsx","components/GameUI/GameUI.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","GridCell","props","cellColour","cell","columnWidth","isEatenFood","isSnake","isFood","className","style","width","backgroundColor","GridRow","row","rowHeight","height","cells","map","colID","key","Grid","boardHeight","boardWidth","cellRow","col","push","snake","coordinates","forEach","coord","y","x","food","eatPoints","gridRowElements","rowID","Action","Danger","initializeGame","Snake","initializeSnake","FoodLocation","IsOver","AddScore","Turn","directions","RIGHT","growthTimers","generatePointPool","pointPool","cellNumber","pointToNumber","takeGameStep","gameState","inputDirection","newFood","movedSnake","moveSnake","newCoordinates","headCoordinate","length","addScore","pointsAreEqual","spawnFood","growDirection","growSnake","isGameOver","headDirection","newDirections","index","point","moveDirection","newPoint","movePoint","direction","newY","newX","UP","DOWN","LEFT","turn","growthDir","grownSnake","splice","eatPoint","concat","findIndex","p","snakeCoordinates","availablePoints","num","rng","Math","round","random","numberToPoint","xMax","yMax","floor","p1","p2","GameLogic","gameTick","keyDownHandler","event","snakeDirection","performGameStep","setSnakeDirection","newSnake","state","N","currentDirection","setState","start","gameStarted","paused","console","log","newGameState","updateGame","gameOver","updateScore","this","humanControlled","window","addEventListener","setInterval","clearInterval","aiGameState","React","ParameterInput","labelText","type","onChange","onTextChangeHandler","value","Card","overflow","children","GameOverModal","onClick","closeHandler","score","highScore","Algorithm","Q","Alpha","Gamma","Epsilon","t","TrainingIteration","TrainingIterationPrev","CumulativeReward","Actions","Dangers","Directions","iterate","gameRunning","train","startGame","playSingleGame","a","async","currentState","simplifyState","action","usePolicy","mapActionToDirection","SnakeDirection","takeAction","newState","immediateReward","getReward","UpdateQ","reward","pow","InputDirection","foodDir","snakeHeadDir","imminentDangers","Array","actionId","realAction","peekHeadCoordinate","i","element","sum","isDangerous","FoodDirection","stateFrom","stateTo","r","sa","State","oldValue","GetQValue","optimalValue","max","GetQRewards","SetQValue","MapStateActionToId","MapIdToState","id","l0","l1","snakeDir","danger","rewards","Number","epsilonFade","indexOf","algorithmUpdateScore","algorithmGameOver","Object","values","filter","isNumber","permutations","qId","currentDir","FORWARD","TabButton","selectedId","src","alt","GameUI","increment","startNewGame","startPaused","willAutoClose","setTimeout","gridWidthChangeHandler","parseInt","target","alert","gridHeightChangeHandler","gameSpeedChangeHandler","gameSpeed","renderTab","selectedTab","renderGame","renderSettings","renderGameLogic","toString","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dfcec7b.chunk.js","sourcesContent":["export enum Direction {\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT\r\n}\r\n","import \"./GridCell.css\";\r\nimport * as React from \"react\";\r\nimport { Cell } from \"../../types/Cell\";\r\n\r\ninterface CellProps {\r\n  cell: Cell;\r\n  columnWidth: string;\r\n}\r\n\r\nconst GridCell: React.FunctionComponent<CellProps> = props => {\r\n  const { cell, columnWidth } = props;\r\n\r\n  let cellColour: string;\r\n  if (cell.isEatenFood === true) {\r\n    cellColour = \"gray\";\r\n  } else if (cell.isSnake === true) {\r\n    cellColour = \"black\";\r\n  } else if (cell.isFood === true) {\r\n    cellColour = \"green\";\r\n  } else {\r\n    cellColour = \"white\";\r\n  }\r\n  \r\n  return (\r\n    <div className=\"cell\" style={{ width: columnWidth, backgroundColor: cellColour }} />\r\n  );\r\n};\r\n\r\nexport default GridCell;\r\n","import \"./GridRow.css\";\r\nimport * as React from \"react\";\r\nimport { Cell } from \"../../types/Cell\";\r\nimport { Row } from \"../../types/Row\";\r\nimport GridCell from \"../GridCell/GridCell\";\r\n\r\ninterface GridRowProps {\r\n  rowHeight: string;\r\n  row: Row;\r\n  columnWidth: string;\r\n}\r\n\r\nconst GridRow: React.FunctionComponent<GridRowProps> = props => {\r\n  const { row, rowHeight, columnWidth } = props;\r\n\r\n  const renderCells = (): JSX.Element[] => {\r\n    const cells: JSX.Element[] = row.cells.map((cell: Cell, colID: number) => {\r\n      return <GridCell key={colID} cell={cell} columnWidth={columnWidth} />;\r\n    });\r\n    return cells;\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\" style={{ height: rowHeight }}>\r\n      {renderCells()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridRow;\r\n","import \"./Grid.css\";\r\nimport * as React from \"react\";\r\nimport { Row } from \"../../types/Row\";\r\nimport { Snake } from \"../../types/Snake\";\r\nimport { Point } from \"../../types/Point\";\r\nimport GridRow from \"../GridRow/GridRow\";\r\n\r\ninterface GridProps {\r\n  snake: Snake;\r\n  food: Point;\r\n\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n}\r\n\r\nconst Grid: React.FunctionComponent<GridProps> = props => {\r\n  const cells: Array<Row> = [];\r\n\r\n  const rowHeight: string = `${100.0 / props.boardHeight}%`;\r\n  const columnWidth: string = `${100.0 / props.boardWidth}%`;\r\n\r\n  for (let row = 0; row < props.boardHeight; row++) {\r\n    const cellRow: Row = { cells: [] };\r\n    for (let col = 0; col < props.boardWidth; col++) {\r\n      cellRow.cells.push({ isSnake: false, isFood: false, isEatenFood: false });\r\n    }\r\n    cells.push(cellRow);\r\n  }\r\n\r\n  // Mark coordinates occupied by snake\r\n  props.snake.coordinates.forEach((coord: Point) => {\r\n    cells[coord.y].cells[coord.x].isSnake = true;\r\n  });\r\n\r\n  // Mark coordinate occupied by food\r\n  cells[props.food.y].cells[props.food.x].isFood = true;\r\n\r\n  // Mark coordinates occupied by eaten food i.e. food inside snake\r\n  props.snake.eatPoints.forEach((coord: Point) => {\r\n    cells[coord.y].cells[coord.x].isEatenFood = true;\r\n  });\r\n\r\n  const gridRowElements: JSX.Element[] = cells.map((row: Row, rowID: number) => {\r\n    return (\r\n      <GridRow key={rowID} row={row} rowHeight={rowHeight} columnWidth={columnWidth} />\r\n    );\r\n  });\r\n\r\n  return <div className=\"board\">{gridRowElements}</div>;\r\n};\r\n\r\nexport default Grid;\r\n","import * as React from \"react\";\r\nimport { Direction } from \"../../types/Direction\";\r\nimport { isNumber } from \"util\";\r\nimport GameLogic from \"../GameLogic/GameLogic\";\r\nimport { Snake } from \"../../types/Snake\";\r\nimport {\r\n  moveSnake,\r\n  movePoint,\r\n  pointsAreEqual,\r\n  takeGameStep,\r\n  generatePointPool,\r\n  initializeGame\r\n} from \"../GameLogic/GameFunctions\";\r\nimport { Point } from \"../../types/Point\";\r\nimport { GameState } from \"../../types/GameState\";\r\n\r\nenum Action {\r\n  LEFT,\r\n  FORWARD,\r\n  RIGHT\r\n}\r\n\r\nenum Danger {\r\n  NONE,\r\n  RIGHT,\r\n  FORWARD,\r\n  FORWARD_AND_RIGHT,\r\n  LEFT,\r\n  LEFT_AND_RIGHT,\r\n  LEFT_AND_FORWARD,\r\n  LEFT_AND_FORWARD_AND_RIGHT\r\n}\r\n\r\ndeclare type State = {\r\n  Danger: Danger;\r\n  SnakeDirection: Direction;\r\n  FoodDirection: Direction;\r\n};\r\n\r\ndeclare type StateActionPair = {\r\n  State: State;\r\n  Action: Action;\r\n};\r\n\r\nexport interface AlgorithmProps {\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n  paused: boolean;\r\n  score: number;\r\n  startGame: boolean;\r\n  updateScore: (increment: number) => void;\r\n  gameOver: (willAutoClose: boolean) => void;\r\n  gameStarted: () => void;\r\n}\r\n\r\nexport interface AlgorithmState {\r\n  gameState: GameState;\r\n}\r\n\r\nexport default class Algorithm extends React.Component<AlgorithmProps, AlgorithmState> {\r\n  private Q: number[];\r\n  private Alpha: number; // Learning rate\r\n  private Gamma: number; // Discount factor\r\n  private Epsilon: number; // Epsilon greedy\r\n  private t: number; // Time\r\n\r\n  private TrainingIteration: number;\r\n  private TrainingIterationPrev: number;\r\n  private CumulativeReward: number;\r\n\r\n  private Actions: (string | Action)[];\r\n  private Dangers: (string | Danger)[];\r\n  private Directions: (string | Direction)[];\r\n\r\n  private pointPool: number[];\r\n\r\n  private iterate: NodeJS.Timeout;\r\n  private gameRunning: boolean;\r\n\r\n  constructor(props: AlgorithmProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      gameState: initializeGame()\r\n    };\r\n\r\n    this.TrainingIteration = 0;\r\n    this.TrainingIterationPrev = 0;\r\n    this.CumulativeReward = 0;\r\n\r\n    this.Alpha = 1.0;\r\n    this.Gamma = 0.8;\r\n    this.Epsilon = 0.02;\r\n    this.t = 0;\r\n    this.Q = [];\r\n    this.Actions = [];\r\n    this.Dangers = [];\r\n    this.Directions = [];\r\n    this.pointPool = generatePointPool(this.props.boardWidth, this.props.boardHeight);\r\n    this.iterate = setInterval(this.train, 50);\r\n    this.gameRunning = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Transform enumerations into number arrays\r\n    this.Actions = Object.values(Action).filter((value: string | Action) => {\r\n      return isNumber(value);\r\n    });\r\n    this.Dangers = Object.values(Danger).filter((value: string | Danger) => {\r\n      console.log(value);\r\n      return isNumber(value);\r\n    });\r\n    this.Directions = Object.values(Direction).filter((value: string | Direction) => {\r\n      return isNumber(value);\r\n    });\r\n\r\n    // Initialize Q\r\n    const permutations: number =\r\n      this.Actions.length *\r\n      this.Dangers.length *\r\n      this.Directions.length *\r\n      this.Directions.length;\r\n    for (let i = 0; i < permutations; i++) {\r\n      this.Q.push(0.0);\r\n    }\r\n\r\n    console.log(\r\n      `Q size: ${this.Actions.length} x ${this.Dangers.length} x ${this.Directions.length} x ${this.Directions.length} = ${permutations}`\r\n    );\r\n\r\n    // [0, 1, 2] = [LEFT, FORWARD, RIGHT]\r\n    // [UP, DOWN, LEFT, RIGHT]\r\n    // const actionStr = [\"LEFT\", \"FORWARD\", \"RIGHT\"];\r\n    // const dirStr = [\"UP\", \"DOWN\", \"LEFT\", \"RIGHT\"];\r\n    // for (let i = 0; i < this.Actions.length; i++) {\r\n    //   const action = this.Actions[i];\r\n    //   for (let j = 0; j < this.Directions.length; j++) {\r\n    //     const direction = this.Directions[j];\r\n    //     const realDir: Direction = this.MapActionToDirection(i, j);\r\n    //     console.log(\r\n    //       `Head dir ${dirStr[j]}, action ${actionStr[i]} => ${dirStr[realDir]}`\r\n    //     );\r\n    //   }\r\n    // }\r\n\r\n    // for (let foodDir = 0; foodDir < this.Directions.length; foodDir++) {\r\n    //   for (let snakeDir = 0; snakeDir < this.Directions.length; snakeDir++) {\r\n    //     for (let danger = 0; danger < this.Dangers.length; danger++) {\r\n    //       for (let action = 0; action < this.Actions.length; action++) {\r\n    //         const sa: StateActionPair = {\r\n    //           Action: action,\r\n    //           State: { Danger: danger, FoodDirection: foodDir, SnakeDirection: snakeDir }\r\n    //         };\r\n    //         const id = this.MapStateActionToId(sa);\r\n    //         const s: StateActionPair = this.MapIdToState(id);\r\n\r\n    //         console.log(\r\n    //           `(${action}, ${danger}, ${snakeDir}, ${foodDir}) => ${id} => (${s.Action}, ${s.State.Danger}, ${s.State.SnakeDirection}, ${s.State.FoodDirection})`\r\n    //         );\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n    // const dangersStr: string[] = Object.keys(Danger);\r\n    // for (let i = 0; i < 2; i++) {\r\n    //   for (let j = 0; j < 2; j++) {\r\n    //     for (let k = 0; k < 2; k++) {\r\n    //       const imminentDangers: number[] = [i, j, k];\r\n    //       let sum: number = 0;\r\n    //       imminentDangers.forEach((isDangerous: number, index: number) => {\r\n    //         sum += isDangerous * Math.pow(2, imminentDangers.length - index - 1);\r\n    //       })\r\n\r\n    //       const danger: Danger = sum;\r\n\r\n    //       console.log(`Danger (${i}, ${j}, ${k}) => ${danger} => ${dangersStr[dangersStr.length / 2 + danger]}`);\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.iterate);\r\n  }\r\n\r\n  train = () => {\r\n    if (this.props.paused) {\r\n      return;\r\n    }\r\n    const maxTurns: number = 10000;\r\n\r\n    if (this.props.startGame && !this.gameRunning) {\r\n      console.log(`Starting iteration #${this.TrainingIteration}`);\r\n      this.t = 0;\r\n      this.TrainingIteration++;\r\n      this.setState({\r\n        gameState: initializeGame()\r\n      });\r\n      this.props.gameStarted();\r\n      this.gameRunning = true;\r\n    }\r\n    \r\n    if (this.state.gameState.IsOver || this.t > maxTurns) {\r\n      this.props.gameOver(true);\r\n      this.gameRunning = false;\r\n      console.log(\"Game over. Turns: \" + this.t + \". Score: \" + this.props.score);\r\n    } else if (this.gameRunning) {\r\n      this.playSingleGame();\r\n    }\r\n  };\r\n\r\n  playSingleGame = async () => {\r\n    // let gameState: GameState = initializeGame();\r\n    // let inputDirection: Direction =\r\n    //   gameState.Snake.directions[gameState.Snake.directions.length - 1];\r\n    // gameState = this.takeAction(gameState, inputDirection);\r\n    // let currentState: State = this.simplifyState(this.state.gameState, inputDirection);\r\n\r\n    const { gameState } = this.state;\r\n\r\n    let inputDirection: Direction =\r\n      gameState.Snake.directions[gameState.Snake.directions.length - 1];\r\n    let currentState: State = this.simplifyState(gameState, Direction.DOWN);\r\n\r\n    // console.log(\"Turn: \" + this.t);\r\n\r\n    const action: Action = this.usePolicy(currentState);\r\n    // const action: Action = Action.RIGHT;\r\n    inputDirection = this.mapActionToDirection(action, currentState.SnakeDirection);\r\n\r\n    // console.log(`Turn #${this.t} Action = ${action} => ${inputDirection}`);\r\n\r\n    const newGameState: GameState = this.takeAction(gameState, inputDirection);\r\n    const newState: State = this.simplifyState(newGameState, inputDirection);\r\n    const immediateReward: number = this.getReward(newGameState);\r\n\r\n    //Console.WriteLine($\"Moved from ({_CurrentState.X}, {_CurrentState.Y})[{action}] => ({newState.X}, {newState.Y}): {immediateReward}\");\r\n\r\n    this.UpdateQ(currentState, newState, action, immediateReward);\r\n\r\n    if (immediateReward !== 0) {\r\n      const reward: number = Math.pow(this.Gamma, this.t) * immediateReward;\r\n      this.CumulativeReward += reward;\r\n      // console.log(\r\n      //   \"Cumulative reward: \" + this.CumulativeReward / (this.TrainingIteration + 1)\r\n      // );\r\n    }\r\n\r\n    if (gameState.AddScore) {\r\n      this.props.updateScore(1);\r\n    }\r\n\r\n    currentState = newState;\r\n    this.t++;\r\n\r\n    this.setState({\r\n      gameState: newGameState\r\n    });\r\n  };\r\n\r\n  simplifyState = (gameState: GameState, InputDirection: Direction): State => {\r\n    const { Snake, FoodLocation } = gameState;\r\n    const { boardWidth, boardHeight } = this.props;\r\n    const snakeHeadDir: Direction = Snake.directions[Snake.directions.length - 1];\r\n\r\n    const headCoordinate: Point = Snake.coordinates[Snake.coordinates.length - 1];\r\n    let foodDir: Direction;\r\n    if (FoodLocation.x > headCoordinate.x) {\r\n      foodDir = Direction.RIGHT;\r\n    } else if (FoodLocation.x < headCoordinate.x) {\r\n      foodDir = Direction.LEFT;\r\n    } else if (FoodLocation.y < headCoordinate.y) {\r\n      foodDir = Direction.DOWN;\r\n    } else {\r\n      foodDir = Direction.UP;\r\n    }\r\n\r\n    const movedSnake: Snake = moveSnake(Snake, InputDirection, boardWidth, boardHeight);\r\n    const imminentDangers: number[] = new Array<number>(this.Actions.length);\r\n    for (let actionId = 0; actionId < imminentDangers.length; actionId++) {\r\n      imminentDangers[actionId] = 0;\r\n\r\n      const action: Action | string = this.Actions[actionId];\r\n      const realAction: Direction = this.mapActionToDirection(action, snakeHeadDir);\r\n      const peekHeadCoordinate: Point = movePoint(\r\n        headCoordinate,\r\n        realAction,\r\n        boardWidth,\r\n        boardHeight\r\n      );\r\n\r\n      for (let i = 0; i < movedSnake.coordinates.length - 1; i++) {\r\n        const element: Point = movedSnake.coordinates[i];\r\n        if (pointsAreEqual(peekHeadCoordinate, element)) {\r\n          imminentDangers[actionId] = 1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let sum: number = 0;\r\n    imminentDangers.forEach((isDangerous: number, index: number) => {\r\n      sum += isDangerous * Math.pow(2, imminentDangers.length - index - 1);\r\n    });\r\n\r\n    const danger: Danger = sum;\r\n\r\n    const state: State = {\r\n      Danger: danger,\r\n      SnakeDirection: snakeHeadDir,\r\n      FoodDirection: foodDir\r\n    };\r\n\r\n    return state;\r\n  };\r\n\r\n  UpdateQ = (stateFrom: State, stateTo: State, a: Action, r: number) => {\r\n    const sa: StateActionPair = {\r\n      State: stateFrom,\r\n      Action: a\r\n    };\r\n\r\n    const oldValue: number = this.GetQValue(sa);\r\n\r\n    const optimalValue: number = Math.max(...this.GetQRewards(stateTo));\r\n    const x: number =\r\n      (1 - this.Alpha) * oldValue + this.Alpha * (r + this.Gamma * optimalValue);\r\n\r\n    this.SetQValue(sa, x);\r\n  };\r\n\r\n  GetQValue(sa: StateActionPair): number {\r\n    const qId = this.MapStateActionToId(sa);\r\n    // console.log(`Q[${qId}] = ${this.Q[qId]}`)\r\n    return this.Q[qId];\r\n  }\r\n\r\n  SetQValue(sa: StateActionPair, x: number) {\r\n    const qId = this.MapStateActionToId(sa);\r\n    this.Q[qId] = x;\r\n  }\r\n\r\n  MapStateActionToId = (sa: StateActionPair): number => {\r\n    const id: number =\r\n      sa.Action +\r\n      sa.State.Danger * this.Actions.length +\r\n      sa.State.SnakeDirection * this.Actions.length * this.Dangers.length +\r\n      sa.State.FoodDirection *\r\n        this.Actions.length *\r\n        this.Dangers.length *\r\n        this.Directions.length;\r\n    return id;\r\n  };\r\n\r\n  MapIdToState = (id: number): StateActionPair => {\r\n    const l0: number = this.Actions.length * this.Dangers.length * this.Directions.length;\r\n    const l1: number = this.Actions.length * this.Dangers.length;\r\n    const foodDir: Direction = Math.floor(id / l0);\r\n    const snakeDir: Direction = Math.floor((id - foodDir * l0) / l1);\r\n    const danger: Danger = Math.floor(\r\n      (id - foodDir * l0 - snakeDir * l1) / this.Actions.length\r\n    );\r\n    const action: Action =\r\n      id - foodDir * l0 - snakeDir * l1 - danger * this.Actions.length;\r\n\r\n    return {\r\n      Action: action,\r\n      State: { Danger: danger, FoodDirection: foodDir, SnakeDirection: snakeDir }\r\n    };\r\n  };\r\n\r\n  GetQRewards = (stateTo: State): number[] => {\r\n    const rewards: number[] = new Array<number>();\r\n    for (let i = 0; i < this.Actions.length; i++) {\r\n      const action = this.Actions[i];\r\n      const sa: StateActionPair = { State: stateTo, Action: Number(action) };\r\n      rewards[i] = this.GetQValue(sa);\r\n    }\r\n\r\n    return rewards;\r\n  };\r\n\r\n  usePolicy = (state: State): Action => {\r\n    // const explore: boolean = Math.random() < this.Epsilon;\r\n    const epsilonFade: number = Math.pow(0.80, this.TrainingIteration);\r\n    const explore: boolean = this.Epsilon + (1 - this.Epsilon) * epsilonFade > Math.random();\r\n    if (explore) {\r\n      const value: number = Math.round(Math.random() * this.Actions.length - 0.5);\r\n      return value;\r\n    } else {\r\n      const rewards: number[] = this.GetQRewards(state);\r\n      const value: number = Number(this.Actions[rewards.indexOf(Math.max(...rewards))]);\r\n      return value;\r\n    }\r\n  };\r\n\r\n  takeAction = (stateFrom: GameState, inputDirection: Direction): GameState => {\r\n    return takeGameStep(\r\n      stateFrom,\r\n      inputDirection,\r\n      this.props.boardWidth,\r\n      this.props.boardHeight,\r\n      this.pointPool\r\n    );\r\n  };\r\n\r\n  mapActionToDirection(action: string | Action, currentDir: Direction): Direction {\r\n    if (action !== Action.FORWARD)\r\n      switch (currentDir) {\r\n        case Direction.UP:\r\n          if (action === Action.LEFT) {\r\n            return Direction.LEFT;\r\n          } else if (action === Action.RIGHT) {\r\n            return Direction.RIGHT;\r\n          }\r\n          break;\r\n        case Direction.RIGHT:\r\n          if (action === Action.LEFT) {\r\n            return Direction.UP;\r\n          } else if (action === Action.RIGHT) {\r\n            return Direction.DOWN;\r\n          }\r\n          break;\r\n        case Direction.DOWN:\r\n          if (action === Action.LEFT) {\r\n            return Direction.RIGHT;\r\n          } else if (action === Action.RIGHT) {\r\n            return Direction.LEFT;\r\n          }\r\n          break;\r\n        case Direction.LEFT:\r\n          if (action === Action.LEFT) {\r\n            return Direction.DOWN;\r\n          } else if (action === Action.RIGHT) {\r\n            return Direction.UP;\r\n          }\r\n          break;\r\n        default:\r\n          return Direction.RIGHT;\r\n      }\r\n    return currentDir;\r\n  }\r\n\r\n  getReward = (gameState: GameState): number => {\r\n    if (gameState.AddScore) {\r\n      return 1;\r\n    } else if (gameState.IsOver) {\r\n      return -5;\r\n    }\r\n    return -0.01;\r\n  };\r\n\r\n  algorithmUpdateScore = () => {\r\n    this.props.updateScore(1);\r\n  };\r\n\r\n  algorithmGameOver = () => {\r\n    this.props.gameOver(true);\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <GameLogic\r\n        boardHeight={this.props.boardHeight}\r\n        boardWidth={this.props.boardWidth}\r\n        updateScore={this.algorithmUpdateScore}\r\n        gameOver={this.algorithmGameOver}\r\n        paused={false}\r\n        start={false}\r\n        humanControlled={false}\r\n        aiGameState={this.state.gameState}\r\n        gameStarted={() => {}}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import { Snake } from \"../../types/Snake\";\r\nimport { Point } from \"../../types/Point\";\r\nimport { Direction } from \"../../types/Direction\";\r\nimport { GameState } from \"../../types/GameState\";\r\n\r\nexport const initializeGame = (): GameState => {\r\n  return {\r\n    Snake: initializeSnake(),\r\n    FoodLocation: { x: 2, y: 2 },\r\n    IsOver: false,\r\n    AddScore: false,\r\n    Turn: 0\r\n  };\r\n};\r\n\r\nexport const initializeSnake = (): Snake => {\r\n  const coords: Array<Point> = [\r\n    { x: 0, y: 0 }\r\n    // { x: 1, y: 0 },\r\n    // { x: 2, y: 0 },\r\n    // { x: 3, y: 0 },\r\n    // { x: 4, y: 0 }\r\n  ];\r\n  const directions: Array<Direction> = [\r\n    Direction.RIGHT\r\n    // Direction.RIGHT,\r\n    // Direction.RIGHT,\r\n    // Direction.RIGHT,\r\n    // Direction.RIGHT\r\n  ];\r\n  return {\r\n    coordinates: coords,\r\n    directions: directions,\r\n    eatPoints: [],\r\n    growthTimers: []\r\n  };\r\n};\r\n\r\nexport const generatePointPool = (boardWidth: number, boardHeight: number): number[] => {\r\n  const pointPool: number[] = [];\r\n  for (let row = 0; row < boardHeight; row++) {\r\n    for (let col = 0; col < boardWidth; col++) {\r\n      const p: Point = { x: col, y: row };\r\n      const cellNumber: number = pointToNumber(p, boardWidth);\r\n      pointPool.push(cellNumber);\r\n    }\r\n  }\r\n  return pointPool;\r\n};\r\n\r\nexport const takeGameStep = (\r\n  gameState: GameState,\r\n  inputDirection: Direction,\r\n  boardWidth: number,\r\n  boardHeight: number,\r\n  pointPool: number[]\r\n): GameState => {\r\n  const { Snake, FoodLocation, Turn } = gameState;\r\n\r\n  // Handle move snake\r\n  const movedSnake: Snake = moveSnake(Snake, inputDirection, boardWidth, boardHeight);\r\n\r\n  const newCoordinates: Point[] = movedSnake.coordinates;\r\n  const headCoordinate: Point = newCoordinates[newCoordinates.length - 1];\r\n\r\n  // Handle eating\r\n  let newFood: Point;\r\n  const addScore: boolean = pointsAreEqual(headCoordinate, FoodLocation);\r\n  if (addScore) {\r\n    movedSnake.eatPoints.push(FoodLocation);\r\n    movedSnake.growthTimers.push(\r\n      Turn + Snake.coordinates.length + Snake.growthTimers.length\r\n    );\r\n\r\n    newFood = spawnFood(newCoordinates, boardWidth, boardHeight, pointPool);\r\n  } else {\r\n    newFood = gameState.FoodLocation;\r\n  }\r\n\r\n  // Handle growing snake\r\n  const growDirection: Direction =\r\n    Snake.directions.length > 1 ? Snake.directions[0] : inputDirection;\r\n  const newSnake: Snake = growSnake(movedSnake, Turn, growDirection);\r\n\r\n  // Handle game over\r\n  const gameOver: boolean = isGameOver(headCoordinate, newCoordinates);\r\n\r\n  return {\r\n    Snake: newSnake,\r\n    FoodLocation: newFood,\r\n    IsOver: gameOver,\r\n    Turn: Turn + 1,\r\n    AddScore: addScore\r\n  };\r\n};\r\n\r\nexport const moveSnake = (\r\n  snake: Snake,\r\n  headDirection: Direction,\r\n  boardWidth: number,\r\n  boardHeight: number\r\n): Snake => {\r\n  const newCoordinates: Array<Point> = [...snake.coordinates];\r\n  const newDirections: Array<Direction> = [...snake.directions];\r\n  for (let index = 0; index < snake.coordinates.length; index++) {\r\n    const point: Point = snake.coordinates[index];\r\n    const moveDirection: Direction =\r\n      index + 1 < snake.coordinates.length ? snake.directions[index] : headDirection;\r\n    // const moveDirection: Direction = snake.directions[index];\r\n\r\n    const newPoint: Point = movePoint(point, moveDirection, boardWidth, boardHeight);\r\n\r\n    newCoordinates[index] = newPoint;\r\n\r\n    // Set next direction to next snake part. If it's the head, keep direction.\r\n    // let newDirection: Direction;\r\n    // if (index + 1 < snake.coordinates.length) {\r\n    //   newDirection = snake.directions[index + 1];\r\n    // } else {\r\n    //   newDirection = headDirection;\r\n    // }\r\n\r\n    newDirections[index] =\r\n      index < snake.coordinates.length - 2 ? snake.directions[index + 1] : headDirection;\r\n\r\n    // console.log(\r\n    //   `Moving part #${index} from point (${point.x}, ${point.y}) [${moveDirection}] to point (${newPoint.x}, ${newPoint.y}) [${newDirections[index]}]`\r\n    // );\r\n  }\r\n\r\n  return { ...snake, coordinates: newCoordinates, directions: newDirections };\r\n};\r\n\r\nexport const movePoint = (\r\n  point: Point,\r\n  direction: Direction,\r\n  boardWidth: number,\r\n  boardHeight: number\r\n): Point => {\r\n  let newY: number = 0;\r\n  let newX: number = 0;\r\n  switch (direction) {\r\n    case Direction.UP:\r\n      if (point.y === 0) {\r\n        newY = boardHeight - 1;\r\n      } else {\r\n        newY = point.y - 1;\r\n      }\r\n      newX = point.x;\r\n      break;\r\n    case Direction.RIGHT:\r\n      if (point.x === boardWidth - 1) {\r\n        newX = 0;\r\n      } else {\r\n        newX = point.x + 1;\r\n      }\r\n      newY = point.y;\r\n      break;\r\n    case Direction.DOWN:\r\n      if (point.y === boardHeight - 1) {\r\n        newY = 0;\r\n      } else {\r\n        newY = point.y + 1;\r\n      }\r\n      newX = point.x;\r\n      break;\r\n    case Direction.LEFT:\r\n      if (point.x === 0) {\r\n        newX = boardWidth - 1;\r\n      } else {\r\n        newX = point.x - 1;\r\n      }\r\n      newY = point.y;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // console.log(`Moved from (${point.x}, ${point.y}) [${direction}] => (${newX}, ${newY})`)\r\n\r\n  return { x: newX, y: newY };\r\n};\r\n\r\nexport const growSnake = (\r\n  movedSnake: Snake,\r\n  turn: number,\r\n  growthDir: Direction\r\n): Snake => {\r\n  const grownSnake: Snake = { ...movedSnake };\r\n  if (movedSnake.growthTimers.length > 0 && movedSnake.growthTimers[0] === turn) {\r\n    grownSnake.growthTimers.splice(0, 1);\r\n    const eatPoint: Point[] = grownSnake.eatPoints.splice(0, 1);\r\n    grownSnake.coordinates = eatPoint.concat(grownSnake.coordinates);\r\n    grownSnake.directions = [growthDir].concat(grownSnake.directions);\r\n  }\r\n  return grownSnake;\r\n};\r\n\r\nexport const isGameOver = (headCoordinate: Point, newCoordinates: Point[]): boolean => {\r\n  const selfIntersect: number = newCoordinates.findIndex((p: Point, index: Number) => {\r\n    if (\r\n      index < newCoordinates.length - 1 &&\r\n      p.x === headCoordinate.x &&\r\n      p.y === headCoordinate.y\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n  return selfIntersect !== -1;\r\n};\r\n\r\nexport const spawnFood = (\r\n  snakeCoordinates: Array<Point>,\r\n  boardWidth: number,\r\n  boardHeight: number,\r\n  pointPool: number[]\r\n): Point => {\r\n  const availablePoints: Array<number> = [...pointPool];\r\n\r\n  snakeCoordinates.forEach((p: Point, index: number) => {\r\n    const num: number = pointToNumber(p, boardWidth);\r\n    availablePoints.splice(num - index, 1);\r\n  });\r\n\r\n  const rng: number = Math.round(Math.random() * (availablePoints.length - 1));\r\n  return numberToPoint(availablePoints[rng], boardWidth, boardHeight);\r\n};\r\n\r\nexport const pointToNumber = (p: Point, xMax: number): number => {\r\n  return p.y * xMax + p.x;\r\n};\r\n\r\nconst numberToPoint = (num: number, xMax: number, yMax: number): Point => {\r\n  const x: number = num % xMax;\r\n  const y: number = Math.floor(num / xMax);\r\n  return { x: x, y: y };\r\n};\r\n\r\nexport const pointsAreEqual = (p1: Point, p2: Point): boolean => {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n};\r\n","import \"./GameLogic.css\";\r\nimport * as React from \"react\";\r\nimport Grid from \"../Grid/Grid\";\r\nimport { Snake } from \"../../types/Snake\";\r\nimport { Direction } from \"../../types/Direction\";\r\nimport { takeGameStep, initializeGame, generatePointPool } from \"./GameFunctions\";\r\nimport { GameState } from \"../../types/GameState\";\r\n\r\nexport interface GameLogicProps {\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n  paused: boolean;\r\n  start: boolean;\r\n  humanControlled: boolean;\r\n  aiGameState?: GameState;\r\n\r\n  updateScore: (increment: number) => void;\r\n  gameOver: (willAutoClose: boolean) => void;\r\n  gameStarted: () => void;\r\n}\r\n\r\nexport interface GameLogicState {\r\n  inputDirection: Direction;\r\n  gameState: GameState;\r\n}\r\n\r\nexport default class GameLogic extends React.Component<GameLogicProps, GameLogicState> {\r\n  gameTick: NodeJS.Timeout | undefined;\r\n  pointPool: Array<number> = [];\r\n\r\n  constructor(props: GameLogicProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputDirection: Direction.RIGHT,\r\n      gameState: initializeGame()\r\n    };\r\n\r\n    this.pointPool = generatePointPool(this.props.boardWidth, this.props.boardHeight);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.humanControlled) {\r\n      window.addEventListener(\"keydown\", this.keyDownHandler);\r\n      this.gameTick = setInterval(this.performGameStep, 100);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.gameTick) {\r\n      clearInterval(this.gameTick);\r\n    }\r\n  }\r\n\r\n  keyDownHandler = (event: KeyboardEvent) => {\r\n    // console.log(`Key pressed: ${event.key}`)\r\n\r\n    let snakeDirection: Direction;\r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        snakeDirection = Direction.UP;\r\n        break;\r\n      case \"ArrowDown\":\r\n        snakeDirection = Direction.DOWN;\r\n        break;\r\n      case \"ArrowLeft\":\r\n        snakeDirection = Direction.LEFT;\r\n        break;\r\n      case \"ArrowRight\":\r\n        snakeDirection = Direction.RIGHT;\r\n        break;\r\n      case \" \":\r\n        this.performGameStep();\r\n        return;\r\n      default:\r\n        // this.performGameStep();\r\n        return;\r\n    }\r\n    this.setSnakeDirection(snakeDirection);\r\n  };\r\n\r\n  setSnakeDirection = (direction: Direction) => {\r\n    const newSnake: Snake = { ...this.state.gameState.Snake };\r\n\r\n    const N: number = newSnake.coordinates.length;\r\n\r\n    // Check illegal direction changes.\r\n    const currentDirection: Direction = newSnake.directions[N - 1];\r\n    if (direction === Direction.DOWN && currentDirection === Direction.UP) {\r\n      return;\r\n    } else if (direction === Direction.UP && currentDirection === Direction.DOWN) {\r\n      return;\r\n    } else if (direction === Direction.LEFT && currentDirection === Direction.RIGHT) {\r\n      return;\r\n    } else if (direction === Direction.RIGHT && currentDirection === Direction.LEFT) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      inputDirection: direction\r\n    });\r\n  };\r\n\r\n  performGameStep = () => {\r\n    if (this.props.start) {\r\n      this.setState({\r\n        inputDirection: Direction.RIGHT,\r\n        gameState: initializeGame()\r\n      });\r\n\r\n      this.props.gameStarted();\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.props.paused) {\r\n      return;\r\n    }\r\n\r\n    console.log(\"Turn #\" + this.state.gameState.Turn);\r\n\r\n    // const { snake, food, nextDirection } = this.state;\r\n    // const newSnake: Snake = this.updateSnake(snake, nextDirection, food, this.state.turn);\r\n    const newGameState: GameState = this.updateGame(this.state.gameState);\r\n\r\n    // Handle game over\r\n    if (newGameState.IsOver) {\r\n      this.props.gameOver(false);\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      gameState: newGameState\r\n    });\r\n\r\n    // this.setState({\r\n    //   snake: newSnake,\r\n    //   turn: this.state.turn + 1\r\n    // });\r\n\r\n    // this.spawnNewFood(snake.coordinates);\r\n  };\r\n\r\n  updateGame = (gameState: GameState): GameState => {\r\n    const newGameState: GameState = takeGameStep(\r\n      gameState,\r\n      this.state.inputDirection,\r\n      this.props.boardWidth,\r\n      this.props.boardHeight,\r\n      this.pointPool\r\n    );\r\n\r\n    if (newGameState.AddScore) {\r\n      // this.setState({\r\n      //   score: this.state.score + 1,\r\n      //   food: newGameState.FoodLocation\r\n      // });\r\n      this.props.updateScore(1);\r\n    }\r\n\r\n    return newGameState;\r\n  };\r\n\r\n  public render() {\r\n    const { boardWidth, boardHeight } = this.props;\r\n    const { Snake, FoodLocation } = this.props.aiGameState\r\n      ? this.props.aiGameState\r\n      : this.state.gameState;\r\n    return (\r\n      <Grid\r\n        snake={Snake}\r\n        food={FoodLocation}\r\n        boardWidth={boardWidth}\r\n        boardHeight={boardHeight}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\ninterface ParameterInputProps {\r\n  labelText: string;\r\n  value: string;\r\n  onTextChangeHandler: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst ParameterInput: React.FunctionComponent<ParameterInputProps> = props => {\r\n  return (\r\n    <div>\r\n      <label>{props.labelText}</label>\r\n      <input type=\"text\" onChange={props.onTextChangeHandler} value={props.value}></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParameterInput;\r\n","import \"./Card.css\";\r\nimport * as React from \"react\";\r\nimport { HTMLAttributes } from \"react\";\r\n\r\ninterface CardProps extends HTMLAttributes<HTMLDivElement> {\r\n  overflow?: \"hidden\" | \"auto\";\r\n}\r\n\r\nconst Card: React.FunctionComponent<CardProps> = props => {\r\n  const overflow: string = props.overflow ? props.overflow : \"hidden\";\r\n\r\n  const style: React.CSSProperties = {overflow: overflow}\r\n  return (\r\n      <div className={`card ${props.className}`} style={style} >{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import \"./GameOverModal.css\";\r\nimport * as React from \"react\";\r\n\r\ninterface GameOverModalProps {\r\n  score: number;\r\n  highScore: number;\r\n  closeHandler: () => void;\r\n}\r\n\r\nconst GameOverModal: React.FunctionComponent<GameOverModalProps> = props => {\r\n  return (\r\n    <div className=\"dark-bg\" onClick={props.closeHandler}>\r\n      <div className=\"message-box\">\r\n        <div className=\"score-labels\">\r\n          <label>Game over!</label>\r\n          <label>Score: {props.score}</label>\r\n          {props.score > props.highScore ? (\r\n            <label>New High score: {props.score}</label>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOverModal;\r\n","import './TabButton.css'\r\nimport * as React from \"react\";\r\n\r\ninterface TabButtonProps {\r\n  id: number;\r\n  selectedId: number\r\n  src: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst TabButton: React.FunctionComponent<TabButtonProps> = props => {\r\n  const getClassName = (): string => {\r\n      return props.id === props.selectedId ? \"tab-image selected\" : \"tab-image\";\r\n  };\r\n\r\n  return (\r\n    <img\r\n      className={getClassName()}\r\n      onClick={props.onClick}\r\n      src={props.src}\r\n      alt=\"\"\r\n      width=\"50\"\r\n      height=\"50\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default TabButton;\r\n","import \"./GameUI.css\";\r\nimport * as React from \"react\";\r\nimport GameLogic from \"../GameLogic/GameLogic\";\r\nimport ParameterInput from \"./ParameterInput\";\r\nimport Card from \"../Card/Card\";\r\nimport GameOverModal from \"./GameOverModal/GameOverModal\";\r\nimport Algorithm from \"../MachineLearning/Algorithm\";\r\nimport TabButton from \"./TabButton/TabButton\";\r\n\r\nexport interface GameUIProps {}\r\n\r\nexport interface GameUIState {\r\n  paused: boolean;\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n  gameSpeed: number;\r\n  selectedTab: number;\r\n  score: number;\r\n  highScore: number;\r\n  gameOver: boolean;\r\n  startGame: boolean;\r\n}\r\n\r\nexport default class GameUI extends React.Component<GameUIProps, GameUIState> {\r\n  constructor(props: GameUIProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      paused: true,\r\n      boardWidth: 10,\r\n      boardHeight: 10,\r\n      gameSpeed: 100,\r\n      selectedTab: 0,\r\n      score: 0,\r\n      highScore: 0,\r\n      gameOver: false,\r\n      startGame: false\r\n    };\r\n  }\r\n\r\n  updateScore = (increment: number) => {\r\n    this.setState({\r\n      score: this.state.score + increment\r\n    });\r\n  };\r\n\r\n  startNewGame = (startPaused: boolean) => {\r\n    if (this.state.score > this.state.highScore) {\r\n      this.setState({ highScore: this.state.score });\r\n    }\r\n    this.setState({\r\n      score: 0,\r\n      gameOver: false,\r\n      startGame: true,\r\n      paused: startPaused\r\n    });\r\n  };\r\n\r\n  gameOver = (willAutoClose: boolean) => {\r\n    this.setState({\r\n      gameOver: true\r\n    });\r\n    if (willAutoClose) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          gameOver: false\r\n        });\r\n        this.startNewGame(false);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  gridWidthChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const width: number = parseInt(event.target.value);\r\n    const widthMin: number = 5;\r\n    const widthMax: number = 40;\r\n    if (widthMin < width && width < widthMax) {\r\n      this.setState({\r\n        boardWidth: width\r\n      });\r\n    } else {\r\n      alert(`Width must be in range (${widthMin}, ${widthMax})`);\r\n    }\r\n  };\r\n\r\n  gridHeightChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const height: number = parseInt(event.target.value);\r\n    const heightMin: number = 5;\r\n    const heightMax: number = 40;\r\n    if (heightMin < height && height < heightMax) {\r\n      this.setState({\r\n        boardHeight: height\r\n      });\r\n    } else {\r\n      alert(`Height must be in range (${heightMin}, ${heightMax})`);\r\n    }\r\n  };\r\n\r\n  gameSpeedChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const gameSpeed: number = parseInt(event.target.value);\r\n    const gameSpeedMin: number = 50;\r\n    const gameSpeedMax: number = 1000;\r\n    if (gameSpeedMin < gameSpeed && gameSpeed < gameSpeedMax) {\r\n      this.setState({\r\n        gameSpeed: gameSpeed\r\n      });\r\n    } else {\r\n      alert(`Game speed must be in range (${gameSpeedMin}, ${gameSpeedMax})`);\r\n    }\r\n  };\r\n\r\n  renderTab = (): JSX.Element => {\r\n    switch (this.state.selectedTab) {\r\n      case 0:\r\n      case 2:\r\n        return this.renderGame();\r\n      case 1:\r\n        return this.renderSettings();\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  renderGame = (): JSX.Element => {\r\n    return (\r\n      <div className=\"game-view\">\r\n        <div className=\"game-controls\">\r\n          <Card className=\"game-controls__card\">\r\n            <div className=\"control-buttons\">\r\n              <button\r\n                className=\"game-controls__btn\"\r\n                onClick={() => this.setState({ paused: false })}\r\n              >\r\n                Continue\r\n              </button>\r\n              <button\r\n                className=\"game-controls__btn\"\r\n                onClick={() => this.setState({ paused: true })}\r\n              >\r\n                Pause\r\n              </button>\r\n            </div>\r\n            <div className=\"game-scores\">\r\n              <label className=\"game-scores__label\">Score: {this.state.score}</label>\r\n              <label className=\"game-scores__label\">\r\n                High score: {this.state.highScore}\r\n              </label>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n        <div className=\"game-board\">\r\n          <Card className=\"game-board__card\">\r\n            {this.state.paused ? <p className=\"pause-text\">Game paused</p> : null}\r\n            {this.state.gameOver ? (\r\n              <GameOverModal\r\n                score={this.state.score}\r\n                highScore={this.state.highScore}\r\n                closeHandler={() => this.startNewGame(true)}\r\n              />\r\n            ) : null}\r\n            {this.renderGameLogic()}\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderGameLogic = (): JSX.Element => {\r\n    // console.log(\"Selected tab: \" + this.state.selectedTab);\r\n    if (this.state.selectedTab === 0) {\r\n      return (\r\n        <GameLogic\r\n          boardWidth={this.state.boardWidth}\r\n          boardHeight={this.state.boardHeight}\r\n          paused={this.state.paused}\r\n          updateScore={this.updateScore}\r\n          gameOver={this.gameOver}\r\n          start={this.state.startGame}\r\n          humanControlled={true}\r\n          gameStarted={() => this.setState({ startGame: false })}\r\n        />\r\n      );\r\n    } else if (this.state.selectedTab === 2) {\r\n      return (\r\n        <Algorithm\r\n          boardHeight={this.state.boardHeight}\r\n          boardWidth={this.state.boardWidth}\r\n          gameOver={this.gameOver}\r\n          updateScore={this.updateScore}\r\n          paused={this.state.paused}\r\n          score={this.state.score}\r\n          startGame={this.state.startGame}\r\n          gameStarted={() => this.setState({ startGame: false })}\r\n        />\r\n      );\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  };\r\n\r\n  renderSettings = (): JSX.Element => {\r\n    return (\r\n      <div className=\"game-settings\">\r\n        <Card>\r\n          <ParameterInput\r\n            labelText=\"Grid width:\"\r\n            onTextChangeHandler={this.gridWidthChangeHandler}\r\n            value={this.state.boardWidth.toString()}\r\n          />\r\n          <ParameterInput\r\n            labelText=\"Grid height:\"\r\n            onTextChangeHandler={this.gridHeightChangeHandler}\r\n            value={this.state.boardHeight.toString()}\r\n          />\r\n          <ParameterInput\r\n            labelText=\"Game speed:\"\r\n            onTextChangeHandler={this.gameSpeedChangeHandler}\r\n            value={this.state.gameSpeed.toString()}\r\n          />\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"ui\">\r\n        <div className=\"ui__tab\">{this.renderTab()}</div>\r\n        <div className=\"nav\">\r\n          <Card>\r\n            <div className=\"nav__buttons\">\r\n              <TabButton\r\n                id={0}\r\n                selectedId={this.state.selectedTab}\r\n                onClick={() => this.setState({ selectedTab: 0 })}\r\n                src=\"home_icon-icons.com_73532.png\"\r\n              />\r\n              {/* <TabButton\r\n                id={1}\r\n                selectedId={this.state.selectedTab}\r\n                onClick={() => this.setState({ selectedTab: 1 })}\r\n                src=\"cog-4-512.png\"\r\n              /> */}\r\n              <TabButton\r\n                id={2}\r\n                selectedId={this.state.selectedTab}\r\n                onClick={() =>\r\n                  this.setState({ selectedTab: 2, paused: false, startGame: true })\r\n                }\r\n                src=\"Robot-icon-by-ahlangraphic-580x386.jpg\"\r\n              />\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameUI from \"./components/GameUI/GameUI\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <GameUI />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}