{"version":3,"sources":["types/Direction.ts","components/GridCell/GridCell.tsx","components/GridRow/GridRow.tsx","components/Grid/Grid.tsx","types/Action.ts","types/Danger.ts","types/FoodDirection.ts","components/GameLogic/GameFunctions.ts","components/GameLogic/GameLogic.tsx","components/GameUI/ParameterInput.tsx","components/Card/Card.tsx","components/GameUI/GameOverModal/GameOverModal.tsx","components/GameUI/TabButton/TabButton.tsx","components/MachineLearning/TrainingUI/Graph.tsx","components/MachineLearning/TrainingUI/TrainingUI.tsx","components/MachineLearning/QLearning/AlgorithmFunctions.ts","components/MachineLearning/QLearning/Algorithm.tsx","components/GameUI/GameUI.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","GridCell","props","cellColour","cell","columnWidth","isEatenFood","isSnake","isFood","className","style","width","backgroundColor","GridRow","row","rowHeight","height","cells","map","colID","key","Grid","boardHeight","boardWidth","cellRow","col","push","snake","coordinates","forEach","coord","y","x","food","eatPoints","gridRowElements","rowID","Action","Danger","FoodDirection","initializeGame","Snake","initializeSnake","FoodLocation","IsOver","AddScore","Turn","directions","RIGHT","growthTimers","generatePointPool","pointPool","cellNumber","pointToNumber","takeGameStep","gameState","inputDirection","newFood","movedSnake","moveSnake","newCoordinates","headCoordinate","length","addScore","pointsAreEqual","spawnFood","growDirection","growSnake","isGameOver","headDirection","newDirections","index","point","moveDirection","newPoint","movePoint","direction","newY","newX","UP","DOWN","LEFT","turn","growthDir","grownSnake","splice","eatPoint","concat","findIndex","p","snakeCoordinates","availablePoints","num","rng","Math","round","random","numberToPoint","xMax","yMax","floor","p1","p2","GameLogic","gameTick","keyDownHandler","event","snakeDirection","performGameStep","setSnakeDirection","newSnake","state","N","currentDirection","setState","start","gameStarted","paused","console","log","newGameState","updateGame","gameOver","updateScore","this","humanControlled","window","addEventListener","setInterval","clearInterval","aiGameState","React","ParameterInput","labelText","type","onChange","onTextChangeHandler","value","Card","overflow","children","GameOverModal","onClick","closeHandler","score","highScore","TabButton","id","selectedId","src","alt","Graph","data","margin","top","right","left","bottom","strokeDasharray","isAnimationActive","dataKey","stroke","TrainingUI","trainingInfo","Iteration","multiplier","pow","truncate","RandomChance","CumulativeRewards","mapActionToDirection","action","currentDir","FORWARD","simplifyState","InputDirection","actions","snakeHeadDir","foodDir","getFoodDirection","getDanger","SnakeDirection","flipX","abs","flipY","NONE","imminentDangers","Array","actionId","realAction","peekHeadCoordinate","i","element","sum","isDangerous","Algorithm","Q","Alpha","Gamma","Epsilon","t","TrainingIteration","CumulativeReward","Actions","Dangers","Directions","FoodDirections","iterate","gameRunning","train","startGame","newGame","currentState","gameInitialized","reportProgress","r","epsilonThreshold","playSingleGame","a","async","usePolicy","newState","immediateReward","getReward","UpdateQ","reward","stateFrom","stateTo","sa","State","oldValue","GetQValue","optimalValue","max","GetQRewards","SetQValue","MapStateActionToId","MapIdToState","l0","l1","snakeDir","danger","rewards","Number","indexOf","Object","values","filter","isNumber","permutations","qId","epsilonFade","GameUI","increment","startNewGame","startPaused","willAutoClose","setTimeout","gridWidthChangeHandler","parseInt","target","alert","gridHeightChangeHandler","gameSpeedChangeHandler","gameSpeed","renderTab","selectedTab","renderGame","renderSettings","renderGameLogic","progress","toString","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mZAAYA,E,0GC4BGC,G,4BAnBsC,SAAAC,GAAU,IAGzDC,EAFIC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,YAad,OATEF,GADuB,IAArBC,EAAKE,YACM,QACa,IAAjBF,EAAKG,QACD,SACY,IAAhBH,EAAKI,OACD,QAEA,QAIb,uBAAKC,UAAU,OAAOC,MAAO,CAAEC,MAAON,EAAaO,gBAAiBT,OCKzDU,EAjBwC,SAAAX,GAAU,IACvDY,EAAgCZ,EAAhCY,IAAKC,EAA2Bb,EAA3Ba,UAAWV,EAAgBH,EAAhBG,YASxB,OACE,uBAAKI,UAAU,MAAMC,MAAO,CAAEM,OAAQD,IAPTD,EAAIG,MAAMC,KAAI,SAACd,EAAYe,GACtD,OAAO,gBAAC,EAAD,CAAUC,IAAKD,EAAOf,KAAMA,EAAMC,YAAaA,SCkC7CgB,EApCkC,SAAAnB,GAM/C,IALA,IAAMe,EAAoB,GAEpBF,EAAiB,UAAM,IAAQb,EAAMoB,YAApB,KACjBjB,EAAmB,UAAM,IAAQH,EAAMqB,WAApB,KAEhBT,EAAM,EAAGA,EAAMZ,EAAMoB,YAAaR,IAAO,CAEhD,IADA,IAAMU,EAAe,CAAEP,MAAO,IACrBQ,EAAM,EAAGA,EAAMvB,EAAMqB,WAAYE,IACxCD,EAAQP,MAAMS,KAAK,CAAEnB,SAAS,EAAOC,QAAQ,EAAOF,aAAa,IAEnEW,EAAMS,KAAKF,GAIbtB,EAAMyB,MAAMC,YAAYC,SAAQ,SAACC,GAC/Bb,EAAMa,EAAMC,GAAGd,MAAMa,EAAME,GAAGzB,SAAU,KAI1CU,EAAMf,EAAM+B,KAAKF,GAAGd,MAAMf,EAAM+B,KAAKD,GAAGxB,QAAS,EAGjDN,EAAMyB,MAAMO,UAAUL,SAAQ,SAACC,GAC7Bb,EAAMa,EAAMC,GAAGd,MAAMa,EAAME,GAAG1B,aAAc,KAG9C,IAAM6B,EAAiClB,EAAMC,KAAI,SAACJ,EAAUsB,GAC1D,OACE,gBAAC,EAAD,CAAShB,IAAKgB,EAAOtB,IAAKA,EAAKC,UAAWA,EAAWV,YAAaA,OAItE,OAAO,uBAAKI,UAAU,SAAS0B,K,SHhDrBnC,O,WAAAA,I,eAAAA,I,eAAAA,I,kBAAAA,M,SIAAqC,ECAAC,ECAAC,E,QCKCC,EAAiB,WAC5B,MAAO,CACLC,MAAOC,IACPC,aAAc,CAAEX,EAAG,EAAGD,EAAG,GACzBa,QAAQ,EACRC,UAAU,EACVC,KAAM,IAIGJ,EAAkB,WAe7B,MAAO,CACLd,YAf2B,CAC3B,CAAEI,EAAG,EAAGD,EAAG,GACX,CAAEC,EAAG,EAAGD,EAAG,GACX,CAAEC,EAAG,EAAGD,EAAG,GACX,CAAEC,EAAG,EAAGD,EAAG,GACX,CAAEC,EAAG,EAAGD,EAAG,IAWXgB,WATmC,CACnC/C,EAAUgD,MACVhD,EAAUgD,MACVhD,EAAUgD,MACVhD,EAAUgD,MACVhD,EAAUgD,OAKVd,UAAW,GACXe,aAAc,KAILC,EAAoB,SAAC3B,EAAoBD,GAEpD,IADA,IAAM6B,EAAsB,GACnBrC,EAAM,EAAGA,EAAMQ,EAAaR,IACnC,IAAK,IAAIW,EAAM,EAAGA,EAAMF,EAAYE,IAAO,CACzC,IACM2B,EAAqBC,EADV,CAAErB,EAAGP,EAAKM,EAAGjB,GACcS,GAC5C4B,EAAUzB,KAAK0B,GAGnB,OAAOD,GAGIG,EAAe,SAC1BC,EACAC,EACAjC,EACAD,EACA6B,GACe,IAUXM,EATIhB,EAA8Bc,EAA9Bd,MAAOE,EAAuBY,EAAvBZ,aAAcG,EAASS,EAATT,KAGvBY,EAAoBC,EAAUlB,EAAOe,EAAgBjC,EAAYD,GAEjEsC,EAA0BF,EAAW9B,YACrCiC,EAAwBD,EAAeA,EAAeE,OAAS,GAI/DC,EAAoBC,EAAeH,EAAgBlB,GACrDoB,GACFL,EAAWxB,UAAUR,KAAKiB,GAC1Be,EAAWT,aAAavB,KACtBoB,EAAOL,EAAMb,YAAYkC,OAASrB,EAAMQ,aAAaa,QAGvDL,EAAUQ,EAAUL,EAAgBrC,EAAYD,EAAa6B,IAE7DM,EAAUF,EAAUZ,aAItB,IAAMuB,EACJzB,EAAMM,WAAWe,OAAS,EAAIrB,EAAMM,WAAW,GAAKS,EAMtD,MAAO,CACLf,MANsB0B,EAAUT,EAAYZ,EAAMoB,GAOlDvB,aAAcc,EACdb,OALwBwB,EAAWP,EAAgBD,GAMnDd,KAAMA,EAAO,EACbD,SAAUkB,IAIDJ,EAAY,SACvBhC,EACA0C,EACA9C,EACAD,GAIA,IAFA,IAAMsC,EAA4B,YAAOjC,EAAMC,aACzC0C,EAA+B,YAAO3C,EAAMoB,YACzCwB,EAAQ,EAAGA,EAAQ5C,EAAMC,YAAYkC,OAAQS,IAAS,CAC7D,IAAMC,EAAe7C,EAAMC,YAAY2C,GACjCE,EACJF,EAAQ,EAAI5C,EAAMC,YAAYkC,OAASnC,EAAMoB,WAAWwB,GAASF,EAG7DK,EAAkBC,EAAUH,EAAOC,EAAelD,EAAYD,GAEpEsC,EAAeW,GAASG,EAUxBJ,EAAcC,GACZA,EAAQ5C,EAAMC,YAAYkC,OAAS,EAAInC,EAAMoB,WAAWwB,EAAQ,GAAKF,EAOzE,OAAO,eAAK1C,EAAZ,CAAmBC,YAAagC,EAAgBb,WAAYuB,KAGjDK,EAAY,SACvBH,EACAI,EACArD,EACAD,GAEA,IAAIuD,EAAe,EACfC,EAAe,EACnB,OAAQF,GACN,KAAK5E,EAAU+E,GAEXF,EADc,IAAZL,EAAMzC,EACDT,EAAc,EAEdkD,EAAMzC,EAAI,EAEnB+C,EAAON,EAAMxC,EACb,MACF,KAAKhC,EAAUgD,MAEX8B,EADEN,EAAMxC,IAAMT,EAAa,EACpB,EAEAiD,EAAMxC,EAAI,EAEnB6C,EAAOL,EAAMzC,EACb,MACF,KAAK/B,EAAUgF,KAEXH,EADEL,EAAMzC,IAAMT,EAAc,EACrB,EAEAkD,EAAMzC,EAAI,EAEnB+C,EAAON,EAAMxC,EACb,MACF,KAAKhC,EAAUiF,KAEXH,EADc,IAAZN,EAAMxC,EACDT,EAAa,EAEbiD,EAAMxC,EAAI,EAEnB6C,EAAOL,EAAMzC,EAQjB,MAAO,CAAEC,EAAG8C,EAAM/C,EAAG8C,IAGVV,EAAY,SACvBT,EACAwB,EACAC,GAEA,IAAMC,EAAiB,eAAQ1B,GAC/B,GAAIA,EAAWT,aAAaa,OAAS,GAAKJ,EAAWT,aAAa,KAAOiC,EAAM,CAC7EE,EAAWnC,aAAaoC,OAAO,EAAG,GAClC,IAAMC,EAAoBF,EAAWlD,UAAUmD,OAAO,EAAG,GACzDD,EAAWxD,YAAc0D,EAASC,OAAOH,EAAWxD,aACpDwD,EAAWrC,WAAa,CAACoC,GAAWI,OAAOH,EAAWrC,YAExD,OAAOqC,GAGIhB,EAAa,SAACP,EAAuBD,GAYhD,OAA0B,IAXIA,EAAe4B,WAAU,SAACC,EAAUlB,GAChE,OACEA,EAAQX,EAAeE,OAAS,GAChC2B,EAAEzD,IAAM6B,EAAe7B,GACvByD,EAAE1D,IAAM8B,EAAe9B,MAUhBkC,EAAY,SACvByB,EACAnE,EACAD,EACA6B,GAEA,IAAMwC,EAA8B,YAAOxC,GAE3CuC,EAAiB7D,SAAQ,SAAC4D,EAAUlB,GAClC,IAAMqB,EAAcvC,EAAcoC,EAAGlE,GACrCoE,EAAgBN,OAAOO,EAAMrB,EAAO,MAGtC,IAAMsB,EAAcC,KAAKC,MAAMD,KAAKE,UAAYL,EAAgB7B,OAAS,IACzE,OAAOmC,EAAcN,EAAgBE,GAAMtE,EAAYD,IAG5C+B,EAAgB,SAACoC,EAAUS,GACtC,OAAOT,EAAE1D,EAAImE,EAAOT,EAAEzD,GAGlBiE,EAAgB,SAACL,EAAaM,EAAcC,GAGhD,MAAO,CAAEnE,EAFS4D,EAAMM,EAETnE,EADG+D,KAAKM,MAAMR,EAAMM,KAIxBlC,EAAiB,SAACqC,EAAWC,GACxC,OAAOD,EAAGrE,IAAMsE,EAAGtE,GAAKqE,EAAGtE,IAAMuE,EAAGvE,GCvNjBwE,E,YAInB,WAAYrG,GAAwB,IAAD,8BACjC,4CAAMA,KAJRsG,cAGmC,IAFnCrD,UAA2B,GAEQ,EAwBnCsD,eAAiB,SAACC,GAGhB,IAAIC,EACJ,OAAQD,EAAMtF,KACZ,IAAK,UACHuF,EAAiB3G,EAAU+E,GAC3B,MACF,IAAK,YACH4B,EAAiB3G,EAAUgF,KAC3B,MACF,IAAK,YACH2B,EAAiB3G,EAAUiF,KAC3B,MACF,IAAK,aACH0B,EAAiB3G,EAAUgD,MAC3B,MACF,IAAK,IAEH,YADA,EAAK4D,kBAEP,QAEE,OAEJ,EAAKC,kBAAkBF,IAhDU,EAmDnCE,kBAAoB,SAACjC,GACnB,IAAMkC,EAAe,eAAQ,EAAKC,MAAMxD,UAAUd,OAE5CuE,EAAYF,EAASlF,YAAYkC,OAGjCmD,EAA8BH,EAAS/D,WAAWiE,EAAI,GACxDpC,IAAc5E,EAAUgF,MAAQiC,IAAqBjH,EAAU+E,IAExDH,IAAc5E,EAAU+E,IAAMkC,IAAqBjH,EAAUgF,MAE7DJ,IAAc5E,EAAUiF,MAAQgC,IAAqBjH,EAAUgD,OAE/D4B,IAAc5E,EAAUgD,OAASiE,IAAqBjH,EAAUiF,MAI3E,EAAKiC,SAAS,CACZ1D,eAAgBoB,KArEe,EAyEnCgC,gBAAkB,WAChB,GAAI,EAAK1G,MAAMiH,MAQb,OAPA,EAAKD,SAAS,CACZ1D,eAAgBxD,EAAUgD,MAC1BO,UAAWf,WAGb,EAAKtC,MAAMkH,cAKb,IAAI,EAAKlH,MAAMmH,OAAf,CAIAC,QAAQC,IAAI,SAAW,EAAKR,MAAMxD,UAAUT,MAI5C,IAAM0E,EAA0B,EAAKC,WAAW,EAAKV,MAAMxD,WAGvDiE,EAAa5E,OACf,EAAK1C,MAAMwH,UAAS,GAItB,EAAKR,SAAS,CACZ3D,UAAWiE,MAtGoB,EAiHnCC,WAAa,SAAClE,GACZ,IAAMiE,EAA0BlE,EAC9BC,EACA,EAAKwD,MAAMvD,eACX,EAAKtD,MAAMqB,WACX,EAAKrB,MAAMoB,YACX,EAAK6B,WAWP,OARIqE,EAAa3E,UAKf,EAAK3C,MAAMyH,YAAY,GAGlBH,GA/HP,EAAKT,MAAQ,CACXvD,eAAgBxD,EAAUgD,MAC1BO,UAAWf,KAGb,EAAKW,UAAYD,EAAkB,EAAKhD,MAAMqB,WAAY,EAAKrB,MAAMoB,aARpC,E,iFAY7BsG,KAAK1H,MAAM2H,kBACbC,OAAOC,iBAAiB,UAAWH,KAAKnB,gBACxCmB,KAAKpB,SAAWwB,YAAYJ,KAAKhB,gBAAiB,Q,6CAKhDgB,KAAKpB,UACPyB,cAAcL,KAAKpB,Y,+BAiHN,IAAD,EACsBoB,KAAK1H,MAAjCqB,EADM,EACNA,WAAYD,EADN,EACMA,YADN,EAEkBsG,KAAK1H,MAAMgI,YACvCN,KAAK1H,MAAMgI,YACXN,KAAKb,MAAMxD,UAFPd,EAFM,EAENA,MAAOE,EAFD,EAECA,aAGf,OACE,gBAAC,EAAD,CACEhB,MAAOc,EACPR,KAAMU,EACNpB,WAAYA,EACZD,YAAaA,Q,GAnJkB6G,aCTxBC,EATsD,SAAAlI,GACnE,OACE,2BACE,6BAAQA,EAAMmI,WACd,yBAAOC,KAAK,OAAOC,SAAUrI,EAAMsI,oBAAqBC,MAAOvI,EAAMuI,UCK5DC,G,OATkC,SAAAxI,GAC/C,IAEMQ,EAA6B,CAACiI,SAFXzI,EAAMyI,SAAWzI,EAAMyI,SAAW,UAG3D,OACI,uBAAKlI,UAAS,eAAUP,EAAMO,WAAaC,MAAOA,GAASR,EAAM0I,YCYxDC,G,OAhBoD,SAAA3I,GACjE,OACE,uBAAKO,UAAU,UAAUqI,QAAS5I,EAAM6I,cACtC,uBAAKtI,UAAU,eACb,uBAAKA,UAAU,gBACb,2CACA,uCAAeP,EAAM8I,OACpB9I,EAAM8I,MAAQ9I,EAAM+I,UACnB,gDAAwB/I,EAAM8I,OAC5B,UCSCE,G,OAjB4C,SAAAhJ,GAKzD,OACE,uBACEO,UALOP,EAAMiJ,KAAOjJ,EAAMkJ,WAAa,qBAAuB,YAM9DN,QAAS5I,EAAM4I,QACfO,IAAKnJ,EAAMmJ,IACXC,IAAI,GACJ3I,MAAM,KACNK,OAAO,S,iBC0BEuI,EA/BoC,SAAArJ,GAGjD,OACE,gBAAC,IAAD,CAAqBO,UAAU,kBAAkBE,MAAM,OAAOK,OAAO,OACnE,gBAAC,IAAD,CACEwI,KAAMtJ,EAAMsJ,KACZC,OAAQ,CACNC,IAAK,EACLC,MAAO,IACPC,KAAM,EACNC,OAAQ,IAGV,gBAAC,IAAD,CAAeC,gBAAgB,QAC/B,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,IAAD,CACEC,mBAnBiB,EAoBjBzB,KAAK,WACL0B,QAAQ,IACRC,OAAO,YCdFC,EAhB8C,SAAAhK,GAO3D,OACE,uBAAKO,UAAU,YACb,2CAAmBP,EAAMiK,aAAaC,WACtC,+CATa,SAACxE,GAChB,IACMyE,EAAqBvE,KAAKwE,IAAI,GADX,GAEzB,OAAOxE,KAAKC,MAAMsE,EAAazE,GAAOyE,EAMbE,CAA2C,IAAlCrK,EAAMiK,aAAaK,cAAnD,MACA,gBAAC,EAAD,CAAOhB,KAAMtJ,EAAMiK,aAAaM,sB,mCVrB1BpI,O,eAAAA,I,qBAAAA,I,kBAAAA,M,cCAAC,O,eAAAA,I,iBAAAA,I,qBAAAA,I,yCAAAA,I,eAAAA,I,mCAAAA,I,uCAAAA,I,4DAAAA,M,cCAAC,O,eAAAA,I,WAAAA,I,eAAAA,I,iBAAAA,I,gBAAAA,M,KSUL,IAAMmI,EAAuB,SAClCC,EACAC,GAEA,GAAID,IAAWtI,EAAOwI,QACpB,OAAQD,GACN,KAAK5K,EAAU+E,GACb,GAAI4F,IAAWtI,EAAO4C,KACpB,OAAOjF,EAAUiF,KACZ,GAAI0F,IAAWtI,EAAOW,MAC3B,OAAOhD,EAAUgD,MAEnB,MACF,KAAKhD,EAAUgD,MACb,GAAI2H,IAAWtI,EAAO4C,KACpB,OAAOjF,EAAU+E,GACZ,GAAI4F,IAAWtI,EAAOW,MAC3B,OAAOhD,EAAUgF,KAEnB,MACF,KAAKhF,EAAUgF,KACb,GAAI2F,IAAWtI,EAAO4C,KACpB,OAAOjF,EAAUgD,MACZ,GAAI2H,IAAWtI,EAAOW,MAC3B,OAAOhD,EAAUiF,KAEnB,MACF,KAAKjF,EAAUiF,KACb,GAAI0F,IAAWtI,EAAO4C,KACpB,OAAOjF,EAAUgF,KACZ,GAAI2F,IAAWtI,EAAOW,MAC3B,OAAOhD,EAAU+E,GAEnB,MACF,QACE,OAAO/E,EAAUgD,MAEvB,OAAO4H,GAGIE,EAAgB,SAC3BvH,EACAwH,EACAC,EACAzJ,EACAD,GACW,IACHmB,EAAwBc,EAAxBd,MAAOE,EAAiBY,EAAjBZ,aACTkB,EAAwBpB,EAAMb,YAAYa,EAAMb,YAAYkC,OAAS,GACrEmH,EAA0BxI,EAAMM,WAAWN,EAAMM,WAAWe,OAAS,GACrEoH,EAAyBC,EAC7BtH,EACAlB,EACApB,EACAD,GAiBF,MANqB,CACnBgB,OAVqB8I,EACrB3I,EACAwI,EACAF,EACAxJ,EACAD,EACA0J,GAKAK,eAAgBJ,EAChB1I,cAAe2I,IAMNC,EAAmB,SAC9BtH,EACAlB,EACApB,EACAD,GAGA,IAAMgK,EAAiBxF,KAAKyF,IAAI5I,EAAaX,EAAI6B,EAAe7B,GAAKT,EAAa,EAC5EiK,EAAiB1F,KAAKyF,IAAI5I,EAAaZ,EAAI8B,EAAe9B,GAAKT,EAAc,EACnF,OAAIqB,EAAaX,EAAI6B,EAAe7B,EAC3BsJ,EAAQ/I,EAAc0C,KAAO1C,EAAcS,MACzCL,EAAaX,EAAI6B,EAAe7B,EAClCsJ,EAAQ/I,EAAcS,MAAQT,EAAc0C,KAC1CtC,EAAaZ,EAAI8B,EAAe9B,EAClCyJ,EAAQjJ,EAAcwC,GAAKxC,EAAcyC,KACvCrC,EAAaZ,EAAI8B,EAAe9B,EAClCyJ,EAAQjJ,EAAcyC,KAAOzC,EAAcwC,GAE3CxC,EAAckJ,MAInBL,EAAY,SAChB3I,EACAwI,EACAF,EACAxJ,EACAD,EACA0J,GAMA,IAJA,IAAMnH,EAAwBpB,EAAMb,YAAYa,EAAMb,YAAYkC,OAAS,GACrEJ,EAAoBC,EAAUlB,EAAOsI,EAAgBxJ,EAAYD,GAEjEoK,EAA4B,IAAIC,MAAcX,EAAQlH,QACnD8H,EAAW,EAAGA,EAAWF,EAAgB5H,OAAQ8H,IAAY,CACpEF,EAAgBE,GAAY,EAW5B,IATA,IAAMjB,EAA0BK,EAAQY,GAClCC,EAAwBnB,EAAqBC,EAAQM,GACrDa,EAA4BnH,EAChCd,EACAgI,EACAtK,EACAD,GAGOyK,EAAI,EAAGA,EAAIrI,EAAW9B,YAAYkC,OAAS,EAAGiI,IAAK,CAC1D,IAAMC,EAAiBtI,EAAW9B,YAAYmK,GAC9C,GAAI/H,EAAe8H,EAAoBE,GAAU,CAC/CN,EAAgBE,GAAY,EAC5B,QAKN,IAAIK,EAAc,EAKlB,OAJAP,EAAgB7J,SAAQ,SAACqK,EAAqB3H,GAC5C0H,GAAOC,EAAcpG,KAAKwE,IAAI,EAAGoB,EAAgB5H,OAASS,EAAQ,MAG7D0H,GC1GYE,E,YAqBnB,WAAYjM,GAAwB,IAAD,8BACjC,4CAAMA,KArBAkM,OAoB2B,IAnB3BC,WAmB2B,IAlB3BC,WAkB2B,IAjB3BC,aAiB2B,IAhB3BC,OAgB2B,IAd3BC,uBAc2B,IAb3BC,sBAa2B,IAZ3BjC,uBAY2B,IAV3BkC,aAU2B,IAT3BC,aAS2B,IAR3BC,gBAQ2B,IAP3BC,oBAO2B,IAL3B3J,eAK2B,IAH3B4J,aAG2B,IAF3BC,iBAE2B,IAuEnCC,MAAQ,WACN,IAAI,EAAK/M,MAAMmH,OAAf,CAKA,GAAI,EAAKnH,MAAMgN,YAAc,EAAKF,YAAa,CAC7C1F,QAAQC,IAAR,8BAAmC,EAAKkF,oBACxC,EAAKD,EAAI,EACT,EAAKC,oBAEL,IAAMU,EAAqB3K,IACrBgB,EACJ2J,EAAQ1K,MAAMM,WAAWoK,EAAQ1K,MAAMM,WAAWe,OAAS,GAEvDsJ,EAAsBtC,EAC1BqC,EACA3J,EACA,EAAKmJ,QACL,EAAKzM,MAAMqB,WACX,EAAKrB,MAAMoB,aAGb,EAAK4F,SAAS,CACZ3D,UAAW4J,EACXC,aAAcA,EACdC,iBAAiB,IAEnB,EAAKnN,MAAMkH,cACX,EAAK4F,aAAc,GAGhB,EAAKjG,MAAMxD,UAAUX,QAAU,EAAK4J,EA5BhB,MA4BiC,EAAKQ,aAC7D,EAAK9M,MAAMwH,UAAS,GACpB,EAAK+C,kBAAkB/I,KAAK,CAC1BM,EAAG,EAAKyK,kBAAoB,EAC5B1K,EAAG,EAAK2K,iBAAoB,EAAKD,oBAEnC,EAAKvM,MAAMoN,eAAe,CACxB7C,kBAAmB,EAAKA,kBAAkBvJ,KAAI,SAACqM,GAAO,MAAO,CAACvL,EAAGuL,EAAEvL,EAAGD,EAAGwL,EAAExL,MAC3EqI,UAAW,EAAKqC,kBAChBjC,aAAc,EAAKgD,qBAErB,EAAKR,aAAc,EACnB1F,QAAQC,IAAI,qBAAuB,EAAKiF,EAAI,YAAc,EAAKtM,MAAM8I,QAC5D,EAAKgE,aAAe,EAAKjG,MAAMsG,iBACxC,EAAKI,mBArH0B,EAyHnCA,eAAiB,0CAAAC,EAAAC,OAAA,kDACqB,EAAK5G,MAAjCxD,EADO,EACPA,UAAW6J,EADJ,EACIA,aAKbzC,EAAiB,EAAKiD,UAAUR,GAChC5J,EAAiBkH,EAAqBC,EAAQyC,EAAa/B,gBAI3D7D,EAA0BlE,EAC9BC,EACAC,EACA,EAAKtD,MAAMqB,WACX,EAAKrB,MAAMoB,YACX,EAAK6B,WAGD0K,EAAkB/C,EACtBtD,EACAhE,EACA,EAAKmJ,QACL,EAAKzM,MAAMqB,WACX,EAAKrB,MAAMoB,aAEPwM,EAA0B,EAAKC,UAAUvG,GAI/C,EAAKwG,QAAQZ,EAAcS,EAAUlD,EAAQmD,GAErB,IAApBA,IACIG,EAAiBnI,KAAKwE,IAAI,EAAKgC,MAAO,EAAKE,GAAKsB,EACtD,EAAKpB,kBAAoBuB,GAMvB1K,EAAUV,UACZ,EAAK3C,MAAMyH,YAAY,GAGzB,EAAK6E,IAEL,EAAKtF,SAAS,CACZ3D,UAAWiE,EACX4F,aAAcS,IAhDD,uCAzHkB,EA6KnCG,QAAU,SAACE,EAAkBC,EAAgBT,EAAWH,GACtD,IAAMa,EAAsB,CAC1BC,MAAOH,EACP7L,OAAQqL,GAGJY,EAAmB,EAAKC,UAAUH,GAElCI,EAAuB1I,KAAK2I,IAAL,MAAA3I,KAAI,YAAQ,EAAK4I,YAAYP,KACpDnM,GACH,EAAI,EAAKqK,OAASiC,EAAW,EAAKjC,OAASkB,EAAI,EAAKjB,MAAQkC,GAE/D,EAAKG,UAAUP,EAAIpM,IAzLc,EAuMnC4M,mBAAqB,SAACR,GASpB,OAPEA,EAAG/L,OACH+L,EAAGC,MAAM/L,OAAS,EAAKqK,QAAQ7I,OAC/BsK,EAAGC,MAAMhD,eAAiB,EAAKsB,QAAQ7I,OAAS,EAAK8I,QAAQ9I,OAC7DsK,EAAGC,MAAM9L,cACP,EAAKoK,QAAQ7I,OACb,EAAK8I,QAAQ9I,OACb,EAAK+I,WAAW/I,QA/Ma,EAmNnC+K,aAAe,SAAC1F,GACd,IAAM2F,EAAa,EAAKnC,QAAQ7I,OAAS,EAAK8I,QAAQ9I,OAAS,EAAK+I,WAAW/I,OACzEiL,EAAa,EAAKpC,QAAQ7I,OAAS,EAAK8I,QAAQ9I,OAChDoH,EAAyBpF,KAAKM,MAAM+C,EAAK2F,GACzCE,EAAsBlJ,KAAKM,OAAO+C,EAAK+B,EAAU4D,GAAMC,GACvDE,EAAiBnJ,KAAKM,OACzB+C,EAAK+B,EAAU4D,EAAKE,EAAWD,GAAM,EAAKpC,QAAQ7I,QAKrD,MAAO,CACLzB,OAHA8G,EAAK+B,EAAU4D,EAAKE,EAAWD,EAAKE,EAAS,EAAKtC,QAAQ7I,OAI1DuK,MAAO,CAAE/L,OAAQ2M,EAAQ1M,cAAe2I,EAASG,eAAgB2D,KAhOlC,EAoOnCN,YAAc,SAACP,GAEb,IADA,IAAMe,EAAoB,IAAIvD,MACrBI,EAAI,EAAGA,EAAI,EAAKY,QAAQ7I,OAAQiI,IAAK,CAC5C,IAAMpB,EAAS,EAAKgC,QAAQZ,GACtBqC,EAAsB,CAAEC,MAAOF,EAAS9L,OAAQ8M,OAAOxE,IAC7DuE,EAAQnD,GAAK,EAAKwC,UAAUH,GAG9B,OAAOc,GA5O0B,EA+OnCtB,UAAY,SAAC7G,GAGX,GADyB,EAAKyG,mBAAqB1H,KAAKE,SAGtD,OADsBF,KAAKC,MAAMD,KAAKE,SAAW,EAAK2G,QAAQ7I,OAAS,IAGvE,IAAMoL,EAAoB,EAAKR,YAAY3H,GAE3C,OADsBoI,OAAO,EAAKxC,QAAQuC,EAAQE,QAAQtJ,KAAK2I,IAAL,MAAA3I,KAAI,YAAQoJ,QAvPvC,EAiQnCnB,UAAY,SAACxK,GACX,OAAIA,EAAUV,SACL,EACEU,EAAUX,QACX,GAEF,KApQR,EAAKmE,MAAQ,CACXxD,UAAWf,IACX4K,aAAc,CACZ9K,OAAQA,EAAOmJ,KACflJ,cAAeA,EAAcyC,KAC7BqG,eAAgBrL,EAAUgF,MAE5BqI,iBAAiB,GAGnB,EAAKZ,kBAAoB,EACzB,EAAKC,iBAAmB,EACxB,EAAKjC,kBAAoB,GAEzB,EAAK4B,MAAQ,EACb,EAAKC,MAAQ,GACb,EAAKC,QAAU,EACf,EAAKC,EAAI,EACT,EAAKJ,EAAI,GACT,EAAKO,QAAU,GACf,EAAKC,QAAU,GACf,EAAKC,WAAa,GAClB,EAAKC,eAAiB,GACtB,EAAK3J,UAAYD,EAAkB,EAAKhD,MAAMqB,WAAY,EAAKrB,MAAMoB,aACrE,EAAKyL,QAAU/E,YAAY,EAAKiF,MAAO,IACvC,EAAKD,aAAc,EA5Bc,E,iFAiCjCpF,KAAK+E,QAAU0C,OAAOC,OAAOjN,GAAQkN,QAAO,SAAC9G,GAC3C,OAAO+G,mBAAS/G,MAElBb,KAAKgF,QAAUyC,OAAOC,OAAOhN,GAAQiN,QAAO,SAAC9G,GAC3C,OAAO+G,mBAAS/G,MAElBb,KAAKiF,WAAawC,OAAOC,OAAOtP,GAAWuP,QAAO,SAAC9G,GACjD,OAAO+G,mBAAS/G,MAElBb,KAAKkF,eAAiBuC,OAAOC,OAAO/M,GAAegN,QACjD,SAAC9G,GACC,OAAO+G,mBAAS/G,MAUpB,IALA,IAAMgH,EACJ7H,KAAK+E,QAAQ7I,OACb8D,KAAKgF,QAAQ9I,OACb8D,KAAKiF,WAAW/I,OAChB8D,KAAKkF,eAAehJ,OACbiI,EAAI,EAAGA,EAAI0D,EAAc1D,IAChCnE,KAAKwE,EAAE1K,KAAK,GAGd4F,QAAQC,IAAR,kBACaK,KAAK+E,QAAQ7I,OAD1B,cACsC8D,KAAKgF,QAAQ9I,OADnD,cAC+D8D,KAAKiF,WAAW/I,OAD/E,cAC2F8D,KAAKkF,eAAehJ,OAD/G,cAC2H2L,M,6CAS3HxH,cAAcL,KAAKmF,W,gCAwHXqB,GACR,IAAMsB,EAAM9H,KAAKgH,mBAAmBR,GAEpC,OAAOxG,KAAKwE,EAAEsD,K,gCAGNtB,EAAqBpM,GAC7B,IAAM0N,EAAM9H,KAAKgH,mBAAmBR,GACpCxG,KAAKwE,EAAEsD,GAAO1N,I,yCAyDd,IAAM2N,EAAsB7J,KAAKwE,IAAI,GAAK1C,KAAK6E,mBAC/C,OAAO7E,KAAK2E,SAAW,EAAI3E,KAAK2E,SAAWoD,I,+BAY5B,IAAD,OACd,OACE,gBAAC,EAAD,CACErO,YAAasG,KAAK1H,MAAMoB,YACxBC,WAAYqG,KAAK1H,MAAMqB,WACvBoG,YAAaC,KAAK1H,MAAMyH,YACxBD,SAAU,kBAAM,EAAKxH,MAAMwH,UAAS,IACpCL,QAAQ,EACRF,OAAO,EACPU,iBAAiB,EACjBK,YAAaN,KAAKb,MAAMxD,UACxB6D,YAAa,mB,GA1SkBe,aCZlByH,E,YACnB,WAAY1P,GAAqB,IAAD,8BAC9B,4CAAMA,KAgBRyH,YAAc,SAACkI,GACb,EAAK3I,SAAS,CACZ8B,MAAO,EAAKjC,MAAMiC,MAAQ6G,KAnBE,EAuBhCC,aAAe,SAACC,GACV,EAAKhJ,MAAMiC,MAAQ,EAAKjC,MAAMkC,WAChC,EAAK/B,SAAS,CAAE+B,UAAW,EAAKlC,MAAMiC,QAExC,EAAK9B,SAAS,CACZ8B,MAAO,EACPtB,UAAU,EACVwF,WAAW,EACX7F,OAAQ0I,KA/BoB,EAmChCrI,SAAW,SAACsI,GACV,EAAK9I,SAAS,CACZQ,UAAU,IAERsI,GACFC,YAAW,WACT,EAAK/I,SAAS,CACZQ,UAAU,IAEZ,EAAKoI,cAAa,KACjB,MA7CyB,EAiDhCI,uBAAyB,SAACxJ,GACxB,IAAM/F,EAAgBwP,SAASzJ,EAAM0J,OAAO3H,OACnB,EAEV9H,GAASA,EADC,GAEvB,EAAKuG,SAAS,CACZ3F,WAAYZ,IAGd0P,MAAM,2BAAD,OAPkB,EAOlB,aANkB,GAMlB,OA1DuB,EA8DhCC,wBAA0B,SAAC5J,GACzB,IAAM1F,EAAiBmP,SAASzJ,EAAM0J,OAAO3H,OACnB,EAEVzH,GAAUA,EADA,GAExB,EAAKkG,SAAS,CACZ5F,YAAaN,IAGfqP,MAAM,4BAAD,OAPmB,EAOnB,aANmB,GAMnB,OAvEuB,EA2EhCE,uBAAyB,SAAC7J,GACxB,IAAM8J,EAAoBL,SAASzJ,EAAM0J,OAAO3H,OACnB,GAEV+H,GAAaA,EADH,IAE3B,EAAKtJ,SAAS,CACZsJ,UAAWA,IAGbH,MAAM,gCAAD,OAPsB,GAOtB,aANsB,IAMtB,OApFuB,EAwFhCI,UAAY,WACV,OAAQ,EAAK1J,MAAM2J,aACjB,KAAK,EACL,KAAK,EACH,OAAO,EAAKC,aACd,KAAK,EACH,OAAO,EAAKC,iBACd,QACE,OAAO,8BAhGmB,EAoGhCD,WAAa,WACX,OACE,uBAAKlQ,UAAU,aACb,uBAAKA,UAAU,iBACb,gBAAC,EAAD,CAAMA,UAAU,uBACd,uBAAKA,UAAU,mBACb,0BACEA,UAAU,qBACVqI,QAAS,kBAAM,EAAK5B,SAAS,CAAEG,QAAQ,MAFzC,YAMA,0BACE5G,UAAU,qBACVqI,QAAS,kBAAM,EAAK5B,SAAS,CAAEG,QAAQ,MAFzC,UAOF,uBAAK5G,UAAU,eACb,yBAAOA,UAAU,sBAAjB,UAA8C,EAAKsG,MAAMiC,OACzD,yBAAOvI,UAAU,sBAAjB,eACe,EAAKsG,MAAMkC,cAKhC,uBAAKxI,UAAU,cACb,gBAAC,EAAD,CAAMA,UAAU,oBACb,EAAKsG,MAAMM,OAAS,qBAAG5G,UAAU,cAAb,eAA4C,KAChE,EAAKsG,MAAMW,SACV,gBAAC,EAAD,CACEsB,MAAO,EAAKjC,MAAMiC,MAClBC,UAAW,EAAKlC,MAAMkC,UACtBF,aAAc,kBAAM,EAAK+G,cAAa,MAEtC,KACH,EAAKe,oBAGV,uBAAKpQ,UAAU,gBACe,IAA3B,EAAKsG,MAAM2J,YACV,gBAAC,EAAD,CAAMjQ,UAAU,sBACd,gBAAC,EAAD,CAAY0J,aAAc,EAAKpD,MAAMoD,gBAErC,QAjJoB,EAuJhC0G,gBAAkB,WAEhB,OAA+B,IAA3B,EAAK9J,MAAM2J,YAEX,gBAAC,EAAD,CACEnP,WAAY,EAAKwF,MAAMxF,WACvBD,YAAa,EAAKyF,MAAMzF,YACxB+F,OAAQ,EAAKN,MAAMM,OACnBM,YAAa,EAAKA,YAClBD,SAAU,EAAKA,SACfP,MAAO,EAAKJ,MAAMmG,UAClBrF,iBAAiB,EACjBT,YAAa,kBAAM,EAAKF,SAAS,CAAEgG,WAAW,OAGd,IAA3B,EAAKnG,MAAM2J,YAElB,gBAAC,EAAD,CACEpP,YAAa,EAAKyF,MAAMzF,YACxBC,WAAY,EAAKwF,MAAMxF,WACvBmG,SAAU,EAAKA,SACfC,YAAa,EAAKA,YAClBN,OAAQ,EAAKN,MAAMM,OACnB2B,MAAO,EAAKjC,MAAMiC,MAClBkE,UAAW,EAAKnG,MAAMmG,UACtB9F,YAAa,kBAAM,EAAKF,SAAS,CAAEgG,WAAW,KAC9CI,eAAgB,SAACwD,GAAD,OACd,EAAK5J,SAAS,CAAEiD,aAAc2G,OAK7B,6BAvLqB,EA2LhCF,eAAiB,WACf,OACE,uBAAKnQ,UAAU,iBACb,gBAAC,EAAD,KACE,gBAAC,EAAD,CACE4H,UAAU,cACVG,oBAAqB,EAAK0H,uBAC1BzH,MAAO,EAAK1B,MAAMxF,WAAWwP,aAE/B,gBAAC,EAAD,CACE1I,UAAU,eACVG,oBAAqB,EAAK8H,wBAC1B7H,MAAO,EAAK1B,MAAMzF,YAAYyP,aAEhC,gBAAC,EAAD,CACE1I,UAAU,cACVG,oBAAqB,EAAK+H,uBAC1B9H,MAAO,EAAK1B,MAAMyJ,UAAUO,gBAzMpC,EAAKhK,MAAQ,CACXM,QAAQ,EACR9F,WAAY,GACZD,YAAa,GACbkP,UAAW,IACXE,YAAa,EACb1H,MAAO,EACPC,UAAW,EACXvB,UAAU,EACVwF,WAAW,EACX/C,aAAc,CAAEM,kBAAmB,GAAIL,UAAW,EAAGI,aAAc,IAbvC,E,sEAmNf,IAAD,OACd,OACE,uBAAK/J,UAAU,MACb,uBAAKA,UAAU,WAAWmH,KAAK6I,aAC/B,uBAAKhQ,UAAU,OACb,gBAAC,EAAD,KACE,uBAAKA,UAAU,gBACb,gBAAC,EAAD,CACE0I,GAAI,EACJC,WAAYxB,KAAKb,MAAM2J,YACvB5H,QAAS,kBAAM,EAAK5B,SAAS,CAAEwJ,YAAa,KAC5CrH,IAAI,kCAQN,gBAAC,EAAD,CACEF,GAAI,EACJC,WAAYxB,KAAKb,MAAM2J,YACvB5H,QAAS,kBACP,EAAK5B,SAAS,CAAEwJ,YAAa,EAAGrJ,QAAQ,EAAO6F,WAAW,KAE5D7D,IAAI,mD,GA7OgBlB,aCdrB6I,EARO,WACpB,OACE,yBAAKvQ,UAAU,OACb,kBAAC,EAAD,QCKcwQ,QACW,cAA7BnJ,OAAOoJ,SAASC,UAEe,UAA7BrJ,OAAOoJ,SAASC,UAEhBrJ,OAAOoJ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e76799c.chunk.js","sourcesContent":["export enum Direction {\r\n  UP,\r\n  DOWN,\r\n  LEFT,\r\n  RIGHT\r\n}\r\n","import \"./GridCell.css\";\r\nimport * as React from \"react\";\r\nimport { Cell } from \"../../types/Cell\";\r\n\r\ninterface CellProps {\r\n  cell: Cell;\r\n  columnWidth: string;\r\n}\r\n\r\nconst GridCell: React.FunctionComponent<CellProps> = props => {\r\n  const { cell, columnWidth } = props;\r\n\r\n  let cellColour: string;\r\n  if (cell.isEatenFood === true) {\r\n    cellColour = \"gray\";\r\n  } else if (cell.isSnake === true) {\r\n    cellColour = \"black\";\r\n  } else if (cell.isFood === true) {\r\n    cellColour = \"green\";\r\n  } else {\r\n    cellColour = \"white\";\r\n  }\r\n  \r\n  return (\r\n    <div className=\"cell\" style={{ width: columnWidth, backgroundColor: cellColour }} />\r\n  );\r\n};\r\n\r\nexport default GridCell;\r\n","import \"./GridRow.css\";\r\nimport * as React from \"react\";\r\nimport { Cell } from \"../../types/Cell\";\r\nimport { Row } from \"../../types/Row\";\r\nimport GridCell from \"../GridCell/GridCell\";\r\n\r\ninterface GridRowProps {\r\n  rowHeight: string;\r\n  row: Row;\r\n  columnWidth: string;\r\n}\r\n\r\nconst GridRow: React.FunctionComponent<GridRowProps> = props => {\r\n  const { row, rowHeight, columnWidth } = props;\r\n\r\n  const renderCells = (): JSX.Element[] => {\r\n    const cells: JSX.Element[] = row.cells.map((cell: Cell, colID: number) => {\r\n      return <GridCell key={colID} cell={cell} columnWidth={columnWidth} />;\r\n    });\r\n    return cells;\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\" style={{ height: rowHeight }}>\r\n      {renderCells()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GridRow;\r\n","import \"./Grid.css\";\r\nimport * as React from \"react\";\r\nimport { Row } from \"../../types/Row\";\r\nimport { Snake } from \"../../types/Snake\";\r\nimport { Point } from \"../../types/Point\";\r\nimport GridRow from \"../GridRow/GridRow\";\r\n\r\ninterface GridProps {\r\n  snake: Snake;\r\n  food: Point;\r\n\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n}\r\n\r\nconst Grid: React.FunctionComponent<GridProps> = props => {\r\n  const cells: Array<Row> = [];\r\n\r\n  const rowHeight: string = `${100.0 / props.boardHeight}%`;\r\n  const columnWidth: string = `${100.0 / props.boardWidth}%`;\r\n\r\n  for (let row = 0; row < props.boardHeight; row++) {\r\n    const cellRow: Row = { cells: [] };\r\n    for (let col = 0; col < props.boardWidth; col++) {\r\n      cellRow.cells.push({ isSnake: false, isFood: false, isEatenFood: false });\r\n    }\r\n    cells.push(cellRow);\r\n  }\r\n\r\n  // Mark coordinates occupied by snake\r\n  props.snake.coordinates.forEach((coord: Point) => {\r\n    cells[coord.y].cells[coord.x].isSnake = true;\r\n  });\r\n\r\n  // Mark coordinate occupied by food\r\n  cells[props.food.y].cells[props.food.x].isFood = true;\r\n\r\n  // Mark coordinates occupied by eaten food i.e. food inside snake\r\n  props.snake.eatPoints.forEach((coord: Point) => {\r\n    cells[coord.y].cells[coord.x].isEatenFood = true;\r\n  });\r\n\r\n  const gridRowElements: JSX.Element[] = cells.map((row: Row, rowID: number) => {\r\n    return (\r\n      <GridRow key={rowID} row={row} rowHeight={rowHeight} columnWidth={columnWidth} />\r\n    );\r\n  });\r\n\r\n  return <div className=\"board\">{gridRowElements}</div>;\r\n};\r\n\r\nexport default Grid;\r\n","export enum Action {\r\n    LEFT,\r\n    FORWARD,\r\n    RIGHT\r\n  }","export enum Danger {\r\n    NONE,\r\n    RIGHT,\r\n    FORWARD,\r\n    FORWARD_AND_RIGHT,\r\n    LEFT,\r\n    LEFT_AND_RIGHT,\r\n    LEFT_AND_FORWARD,\r\n    LEFT_AND_FORWARD_AND_RIGHT\r\n  }","export enum FoodDirection {\r\n  NONE,\r\n  UP,\r\n  DOWN,\r\n  RIGHT,\r\n  LEFT\r\n  //   UP_RIGHT,\r\n  //   UP_LEFT,\r\n  //   DOWN_RIGHT,\r\n  //   DOWN_LEFT\r\n}\r\n","import { Snake } from \"../../types/Snake\";\r\nimport { Point } from \"../../types/Point\";\r\nimport { Direction } from \"../../types/Direction\";\r\nimport { GameState } from \"../../types/GameState\";\r\n\r\nexport const initializeGame = (): GameState => {\r\n  return {\r\n    Snake: initializeSnake(),\r\n    FoodLocation: { x: 2, y: 2 },\r\n    IsOver: false,\r\n    AddScore: false,\r\n    Turn: 0\r\n  };\r\n};\r\n\r\nexport const initializeSnake = (): Snake => {\r\n  const coords: Array<Point> = [\r\n    { x: 0, y: 0 },\r\n    { x: 1, y: 0 },\r\n    { x: 2, y: 0 },\r\n    { x: 3, y: 0 },\r\n    { x: 4, y: 0 }\r\n  ];\r\n  const directions: Array<Direction> = [\r\n    Direction.RIGHT,\r\n    Direction.RIGHT,\r\n    Direction.RIGHT,\r\n    Direction.RIGHT,\r\n    Direction.RIGHT\r\n  ];\r\n  return {\r\n    coordinates: coords,\r\n    directions: directions,\r\n    eatPoints: [],\r\n    growthTimers: []\r\n  };\r\n};\r\n\r\nexport const generatePointPool = (boardWidth: number, boardHeight: number): number[] => {\r\n  const pointPool: number[] = [];\r\n  for (let row = 0; row < boardHeight; row++) {\r\n    for (let col = 0; col < boardWidth; col++) {\r\n      const p: Point = { x: col, y: row };\r\n      const cellNumber: number = pointToNumber(p, boardWidth);\r\n      pointPool.push(cellNumber);\r\n    }\r\n  }\r\n  return pointPool;\r\n};\r\n\r\nexport const takeGameStep = (\r\n  gameState: GameState,\r\n  inputDirection: Direction,\r\n  boardWidth: number,\r\n  boardHeight: number,\r\n  pointPool: number[]\r\n): GameState => {\r\n  const { Snake, FoodLocation, Turn } = gameState;\r\n\r\n  // Handle move snake\r\n  const movedSnake: Snake = moveSnake(Snake, inputDirection, boardWidth, boardHeight);\r\n\r\n  const newCoordinates: Point[] = movedSnake.coordinates;\r\n  const headCoordinate: Point = newCoordinates[newCoordinates.length - 1];\r\n\r\n  // Handle eating\r\n  let newFood: Point;\r\n  const addScore: boolean = pointsAreEqual(headCoordinate, FoodLocation);\r\n  if (addScore) {\r\n    movedSnake.eatPoints.push(FoodLocation);\r\n    movedSnake.growthTimers.push(\r\n      Turn + Snake.coordinates.length + Snake.growthTimers.length\r\n    );\r\n\r\n    newFood = spawnFood(newCoordinates, boardWidth, boardHeight, pointPool);\r\n  } else {\r\n    newFood = gameState.FoodLocation;\r\n  }\r\n\r\n  // Handle growing snake\r\n  const growDirection: Direction =\r\n    Snake.directions.length > 1 ? Snake.directions[0] : inputDirection;\r\n  const newSnake: Snake = growSnake(movedSnake, Turn, growDirection);\r\n\r\n  // Handle game over\r\n  const gameOver: boolean = isGameOver(headCoordinate, newCoordinates);\r\n\r\n  return {\r\n    Snake: newSnake,\r\n    FoodLocation: newFood,\r\n    IsOver: gameOver,\r\n    Turn: Turn + 1,\r\n    AddScore: addScore\r\n  };\r\n};\r\n\r\nexport const moveSnake = (\r\n  snake: Snake,\r\n  headDirection: Direction,\r\n  boardWidth: number,\r\n  boardHeight: number\r\n): Snake => {\r\n  const newCoordinates: Array<Point> = [...snake.coordinates];\r\n  const newDirections: Array<Direction> = [...snake.directions];\r\n  for (let index = 0; index < snake.coordinates.length; index++) {\r\n    const point: Point = snake.coordinates[index];\r\n    const moveDirection: Direction =\r\n      index + 1 < snake.coordinates.length ? snake.directions[index] : headDirection;\r\n    // const moveDirection: Direction = snake.directions[index];\r\n\r\n    const newPoint: Point = movePoint(point, moveDirection, boardWidth, boardHeight);\r\n\r\n    newCoordinates[index] = newPoint;\r\n\r\n    // Set next direction to next snake part. If it's the head, keep direction.\r\n    // let newDirection: Direction;\r\n    // if (index + 1 < snake.coordinates.length) {\r\n    //   newDirection = snake.directions[index + 1];\r\n    // } else {\r\n    //   newDirection = headDirection;\r\n    // }\r\n\r\n    newDirections[index] =\r\n      index < snake.coordinates.length - 2 ? snake.directions[index + 1] : headDirection;\r\n\r\n    // console.log(\r\n    //   `Moving part #${index} from point (${point.x}, ${point.y}) [${moveDirection}] to point (${newPoint.x}, ${newPoint.y}) [${newDirections[index]}]`\r\n    // );\r\n  }\r\n\r\n  return { ...snake, coordinates: newCoordinates, directions: newDirections };\r\n};\r\n\r\nexport const movePoint = (\r\n  point: Point,\r\n  direction: Direction,\r\n  boardWidth: number,\r\n  boardHeight: number\r\n): Point => {\r\n  let newY: number = 0;\r\n  let newX: number = 0;\r\n  switch (direction) {\r\n    case Direction.UP:\r\n      if (point.y === 0) {\r\n        newY = boardHeight - 1;\r\n      } else {\r\n        newY = point.y - 1;\r\n      }\r\n      newX = point.x;\r\n      break;\r\n    case Direction.RIGHT:\r\n      if (point.x === boardWidth - 1) {\r\n        newX = 0;\r\n      } else {\r\n        newX = point.x + 1;\r\n      }\r\n      newY = point.y;\r\n      break;\r\n    case Direction.DOWN:\r\n      if (point.y === boardHeight - 1) {\r\n        newY = 0;\r\n      } else {\r\n        newY = point.y + 1;\r\n      }\r\n      newX = point.x;\r\n      break;\r\n    case Direction.LEFT:\r\n      if (point.x === 0) {\r\n        newX = boardWidth - 1;\r\n      } else {\r\n        newX = point.x - 1;\r\n      }\r\n      newY = point.y;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // console.log(`Moved from (${point.x}, ${point.y}) [${direction}] => (${newX}, ${newY})`)\r\n\r\n  return { x: newX, y: newY };\r\n};\r\n\r\nexport const growSnake = (\r\n  movedSnake: Snake,\r\n  turn: number,\r\n  growthDir: Direction\r\n): Snake => {\r\n  const grownSnake: Snake = { ...movedSnake };\r\n  if (movedSnake.growthTimers.length > 0 && movedSnake.growthTimers[0] === turn) {\r\n    grownSnake.growthTimers.splice(0, 1);\r\n    const eatPoint: Point[] = grownSnake.eatPoints.splice(0, 1);\r\n    grownSnake.coordinates = eatPoint.concat(grownSnake.coordinates);\r\n    grownSnake.directions = [growthDir].concat(grownSnake.directions);\r\n  }\r\n  return grownSnake;\r\n};\r\n\r\nexport const isGameOver = (headCoordinate: Point, newCoordinates: Point[]): boolean => {\r\n  const selfIntersect: number = newCoordinates.findIndex((p: Point, index: Number) => {\r\n    if (\r\n      index < newCoordinates.length - 1 &&\r\n      p.x === headCoordinate.x &&\r\n      p.y === headCoordinate.y\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n  return selfIntersect !== -1;\r\n};\r\n\r\nexport const spawnFood = (\r\n  snakeCoordinates: Array<Point>,\r\n  boardWidth: number,\r\n  boardHeight: number,\r\n  pointPool: number[]\r\n): Point => {\r\n  const availablePoints: Array<number> = [...pointPool];\r\n\r\n  snakeCoordinates.forEach((p: Point, index: number) => {\r\n    const num: number = pointToNumber(p, boardWidth);\r\n    availablePoints.splice(num - index, 1);\r\n  });\r\n\r\n  const rng: number = Math.round(Math.random() * (availablePoints.length - 1));\r\n  return numberToPoint(availablePoints[rng], boardWidth, boardHeight);\r\n};\r\n\r\nexport const pointToNumber = (p: Point, xMax: number): number => {\r\n  return p.y * xMax + p.x;\r\n};\r\n\r\nconst numberToPoint = (num: number, xMax: number, yMax: number): Point => {\r\n  const x: number = num % xMax;\r\n  const y: number = Math.floor(num / xMax);\r\n  return { x: x, y: y };\r\n};\r\n\r\nexport const pointsAreEqual = (p1: Point, p2: Point): boolean => {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n};\r\n","import \"./GameLogic.css\";\r\nimport * as React from \"react\";\r\nimport Grid from \"../Grid/Grid\";\r\nimport { Snake } from \"../../types/Snake\";\r\nimport { Direction } from \"../../types/Direction\";\r\nimport { takeGameStep, initializeGame, generatePointPool } from \"./GameFunctions\";\r\nimport { GameState } from \"../../types/GameState\";\r\n\r\nexport interface GameLogicProps {\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n  paused: boolean;\r\n  start: boolean;\r\n  humanControlled: boolean;\r\n  aiGameState?: GameState;\r\n\r\n  updateScore: (increment: number) => void;\r\n  gameOver: (willAutoClose: boolean) => void;\r\n  gameStarted: () => void;\r\n}\r\n\r\nexport interface GameLogicState {\r\n  inputDirection: Direction;\r\n  gameState: GameState;\r\n}\r\n\r\nexport default class GameLogic extends React.Component<GameLogicProps, GameLogicState> {\r\n  gameTick: NodeJS.Timeout | undefined;\r\n  pointPool: Array<number> = [];\r\n\r\n  constructor(props: GameLogicProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputDirection: Direction.RIGHT,\r\n      gameState: initializeGame()\r\n    };\r\n\r\n    this.pointPool = generatePointPool(this.props.boardWidth, this.props.boardHeight);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.humanControlled) {\r\n      window.addEventListener(\"keydown\", this.keyDownHandler);\r\n      this.gameTick = setInterval(this.performGameStep, 100);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.gameTick) {\r\n      clearInterval(this.gameTick);\r\n    }\r\n  }\r\n\r\n  keyDownHandler = (event: KeyboardEvent) => {\r\n    // console.log(`Key pressed: ${event.key}`)\r\n\r\n    let snakeDirection: Direction;\r\n    switch (event.key) {\r\n      case \"ArrowUp\":\r\n        snakeDirection = Direction.UP;\r\n        break;\r\n      case \"ArrowDown\":\r\n        snakeDirection = Direction.DOWN;\r\n        break;\r\n      case \"ArrowLeft\":\r\n        snakeDirection = Direction.LEFT;\r\n        break;\r\n      case \"ArrowRight\":\r\n        snakeDirection = Direction.RIGHT;\r\n        break;\r\n      case \" \":\r\n        this.performGameStep();\r\n        return;\r\n      default:\r\n        // this.performGameStep();\r\n        return;\r\n    }\r\n    this.setSnakeDirection(snakeDirection);\r\n  };\r\n\r\n  setSnakeDirection = (direction: Direction) => {\r\n    const newSnake: Snake = { ...this.state.gameState.Snake };\r\n\r\n    const N: number = newSnake.coordinates.length;\r\n\r\n    // Check illegal direction changes.\r\n    const currentDirection: Direction = newSnake.directions[N - 1];\r\n    if (direction === Direction.DOWN && currentDirection === Direction.UP) {\r\n      return;\r\n    } else if (direction === Direction.UP && currentDirection === Direction.DOWN) {\r\n      return;\r\n    } else if (direction === Direction.LEFT && currentDirection === Direction.RIGHT) {\r\n      return;\r\n    } else if (direction === Direction.RIGHT && currentDirection === Direction.LEFT) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      inputDirection: direction\r\n    });\r\n  };\r\n\r\n  performGameStep = () => {\r\n    if (this.props.start) {\r\n      this.setState({\r\n        inputDirection: Direction.RIGHT,\r\n        gameState: initializeGame()\r\n      });\r\n\r\n      this.props.gameStarted();\r\n\r\n      return;\r\n    }\r\n\r\n    if (this.props.paused) {\r\n      return;\r\n    }\r\n\r\n    console.log(\"Turn #\" + this.state.gameState.Turn);\r\n\r\n    // const { snake, food, nextDirection } = this.state;\r\n    // const newSnake: Snake = this.updateSnake(snake, nextDirection, food, this.state.turn);\r\n    const newGameState: GameState = this.updateGame(this.state.gameState);\r\n\r\n    // Handle game over\r\n    if (newGameState.IsOver) {\r\n      this.props.gameOver(false);\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      gameState: newGameState\r\n    });\r\n\r\n    // this.setState({\r\n    //   snake: newSnake,\r\n    //   turn: this.state.turn + 1\r\n    // });\r\n\r\n    // this.spawnNewFood(snake.coordinates);\r\n  };\r\n\r\n  updateGame = (gameState: GameState): GameState => {\r\n    const newGameState: GameState = takeGameStep(\r\n      gameState,\r\n      this.state.inputDirection,\r\n      this.props.boardWidth,\r\n      this.props.boardHeight,\r\n      this.pointPool\r\n    );\r\n\r\n    if (newGameState.AddScore) {\r\n      // this.setState({\r\n      //   score: this.state.score + 1,\r\n      //   food: newGameState.FoodLocation\r\n      // });\r\n      this.props.updateScore(1);\r\n    }\r\n\r\n    return newGameState;\r\n  };\r\n\r\n  public render() {\r\n    const { boardWidth, boardHeight } = this.props;\r\n    const { Snake, FoodLocation } = this.props.aiGameState\r\n      ? this.props.aiGameState\r\n      : this.state.gameState;\r\n    return (\r\n      <Grid\r\n        snake={Snake}\r\n        food={FoodLocation}\r\n        boardWidth={boardWidth}\r\n        boardHeight={boardHeight}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\ninterface ParameterInputProps {\r\n  labelText: string;\r\n  value: string;\r\n  onTextChangeHandler: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst ParameterInput: React.FunctionComponent<ParameterInputProps> = props => {\r\n  return (\r\n    <div>\r\n      <label>{props.labelText}</label>\r\n      <input type=\"text\" onChange={props.onTextChangeHandler} value={props.value}></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ParameterInput;\r\n","import \"./Card.css\";\r\nimport * as React from \"react\";\r\nimport { HTMLAttributes } from \"react\";\r\n\r\ninterface CardProps extends HTMLAttributes<HTMLDivElement> {\r\n  overflow?: \"hidden\" | \"auto\";\r\n}\r\n\r\nconst Card: React.FunctionComponent<CardProps> = props => {\r\n  const overflow: string = props.overflow ? props.overflow : \"hidden\";\r\n\r\n  const style: React.CSSProperties = {overflow: overflow}\r\n  return (\r\n      <div className={`card ${props.className}`} style={style} >{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import \"./GameOverModal.css\";\r\nimport * as React from \"react\";\r\n\r\ninterface GameOverModalProps {\r\n  score: number;\r\n  highScore: number;\r\n  closeHandler: () => void;\r\n}\r\n\r\nconst GameOverModal: React.FunctionComponent<GameOverModalProps> = props => {\r\n  return (\r\n    <div className=\"dark-bg\" onClick={props.closeHandler}>\r\n      <div className=\"message-box\">\r\n        <div className=\"score-labels\">\r\n          <label>Game over!</label>\r\n          <label>Score: {props.score}</label>\r\n          {props.score > props.highScore ? (\r\n            <label>New High score: {props.score}</label>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOverModal;\r\n","import './TabButton.css'\r\nimport * as React from \"react\";\r\n\r\ninterface TabButtonProps {\r\n  id: number;\r\n  selectedId: number\r\n  src: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst TabButton: React.FunctionComponent<TabButtonProps> = props => {\r\n  const getClassName = (): string => {\r\n      return props.id === props.selectedId ? \"tab-image selected\" : \"tab-image\";\r\n  };\r\n\r\n  return (\r\n    <img\r\n      className={getClassName()}\r\n      onClick={props.onClick}\r\n      src={props.src}\r\n      alt=\"\"\r\n      width=\"50\"\r\n      height=\"50\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default TabButton;\r\n","import {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport * as React from \"react\";\r\nimport { Point } from \"../../../types/Point\";\r\n\r\ninterface GraphProps {\r\n  data: Point[];\r\n}\r\n\r\nconst Graph: React.FunctionComponent<GraphProps> = props => {\r\n  const animate: boolean = false;\r\n\r\n  return (\r\n    <ResponsiveContainer className=\"graph-container\" width=\"100%\" height=\"95%\">\r\n      <LineChart\r\n        data={props.data}\r\n        margin={{\r\n          top: 5,\r\n          right: 100,\r\n          left: 0,\r\n          bottom: 5\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line\r\n          isAnimationActive={animate}\r\n          type=\"monotone\"\r\n          dataKey=\"y\"\r\n          stroke=\"blue\"\r\n          // dot={<CustomizedDot LSL={hueLSL} USL={hueUSL} />}\r\n        />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import \"./TrainingUI.css\";\r\n\r\nimport * as React from \"react\";\r\nimport { TrainingProgress } from \"../../../types/TrainingProgress\";\r\nimport Graph from \"./Graph\";\r\n\r\ninterface TrainingUIProps {\r\n  trainingInfo: TrainingProgress;\r\n}\r\n\r\nconst TrainingUI: React.FunctionComponent<TrainingUIProps> = props => {\r\n  const truncate = (num: number): number => {\r\n    const decimals: number = 3;\r\n    const multiplier: number = Math.pow(10, decimals);\r\n    return Math.round(multiplier * num) / multiplier;\r\n  };\r\n\r\n  return (\r\n    <div className=\"train-ui\">\r\n      <label>Iteration: {props.trainingInfo.Iteration}</label>\r\n      <label>Random chance: {truncate(props.trainingInfo.RandomChance * 100)} %</label>\r\n      <Graph data={props.trainingInfo.CumulativeRewards} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrainingUI;\r\n","import { Direction } from \"../../../types/Direction\";\r\nimport { Action } from \"../../../types/Action\";\r\nimport { GameState } from \"../../../types/GameState\";\r\nimport { State } from \"../../../types/State\";\r\nimport { Point } from \"../../../types/Point\";\r\nimport { moveSnake, movePoint, pointsAreEqual } from \"../../GameLogic/GameFunctions\";\r\nimport { Danger } from \"../../../types/Danger\";\r\nimport { Snake } from \"../../../types/Snake\";\r\nimport { FoodDirection } from \"../../../types/FoodDirection\";\r\n\r\nexport const mapActionToDirection = (\r\n  action: string | Action,\r\n  currentDir: Direction\r\n): Direction => {\r\n  if (action !== Action.FORWARD)\r\n    switch (currentDir) {\r\n      case Direction.UP:\r\n        if (action === Action.LEFT) {\r\n          return Direction.LEFT;\r\n        } else if (action === Action.RIGHT) {\r\n          return Direction.RIGHT;\r\n        }\r\n        break;\r\n      case Direction.RIGHT:\r\n        if (action === Action.LEFT) {\r\n          return Direction.UP;\r\n        } else if (action === Action.RIGHT) {\r\n          return Direction.DOWN;\r\n        }\r\n        break;\r\n      case Direction.DOWN:\r\n        if (action === Action.LEFT) {\r\n          return Direction.RIGHT;\r\n        } else if (action === Action.RIGHT) {\r\n          return Direction.LEFT;\r\n        }\r\n        break;\r\n      case Direction.LEFT:\r\n        if (action === Action.LEFT) {\r\n          return Direction.DOWN;\r\n        } else if (action === Action.RIGHT) {\r\n          return Direction.UP;\r\n        }\r\n        break;\r\n      default:\r\n        return Direction.RIGHT;\r\n    }\r\n  return currentDir;\r\n};\r\n\r\nexport const simplifyState = (\r\n  gameState: GameState,\r\n  InputDirection: Direction,\r\n  actions: (Action | string)[],\r\n  boardWidth: number,\r\n  boardHeight: number\r\n): State => {\r\n  const { Snake, FoodLocation } = gameState;\r\n  const headCoordinate: Point = Snake.coordinates[Snake.coordinates.length - 1];\r\n  const snakeHeadDir: Direction = Snake.directions[Snake.directions.length - 1];\r\n  const foodDir: FoodDirection = getFoodDirection(\r\n    headCoordinate,\r\n    FoodLocation,\r\n    boardWidth,\r\n    boardHeight\r\n  );\r\n  const danger: Danger = getDanger(\r\n    Snake,\r\n    snakeHeadDir,\r\n    InputDirection,\r\n    boardWidth,\r\n    boardHeight,\r\n    actions\r\n  );\r\n\r\n  const state: State = {\r\n    Danger: danger,\r\n    SnakeDirection: snakeHeadDir,\r\n    FoodDirection: foodDir\r\n  };\r\n\r\n  return state;\r\n};\r\n\r\nexport const getFoodDirection = (\r\n  headCoordinate: Point,\r\n  FoodLocation: Point,\r\n  boardWidth: number,\r\n  boardHeight: number\r\n): FoodDirection => {\r\n  // Flip direction if its shorter to go through a wall\r\n  const flipX: boolean = Math.abs(FoodLocation.x - headCoordinate.x) > boardWidth / 2;\r\n  const flipY: boolean = Math.abs(FoodLocation.y - headCoordinate.y) > boardHeight / 2;\r\n  if (FoodLocation.x > headCoordinate.x) {\r\n    return flipX ? FoodDirection.LEFT : FoodDirection.RIGHT;\r\n  } else if (FoodLocation.x < headCoordinate.x) {\r\n    return flipX ? FoodDirection.RIGHT : FoodDirection.LEFT;\r\n  } else if (FoodLocation.y > headCoordinate.y) {\r\n    return flipY ? FoodDirection.UP : FoodDirection.DOWN;\r\n  } else if (FoodLocation.y < headCoordinate.y) {\r\n    return flipY ? FoodDirection.DOWN : FoodDirection.UP;\r\n  } else {\r\n    return FoodDirection.NONE;\r\n  }\r\n};\r\n\r\nconst getDanger = (\r\n  Snake: Snake,\r\n  snakeHeadDir: Direction,\r\n  InputDirection: Direction,\r\n  boardWidth: number,\r\n  boardHeight: number,\r\n  actions: (Action | string)[]\r\n): Danger => {\r\n  const headCoordinate: Point = Snake.coordinates[Snake.coordinates.length - 1];\r\n  const movedSnake: Snake = moveSnake(Snake, InputDirection, boardWidth, boardHeight);\r\n\r\n  const imminentDangers: number[] = new Array<number>(actions.length);\r\n  for (let actionId = 0; actionId < imminentDangers.length; actionId++) {\r\n    imminentDangers[actionId] = 0;\r\n\r\n    const action: Action | string = actions[actionId];\r\n    const realAction: Direction = mapActionToDirection(action, snakeHeadDir);\r\n    const peekHeadCoordinate: Point = movePoint(\r\n      headCoordinate,\r\n      realAction,\r\n      boardWidth,\r\n      boardHeight\r\n    );\r\n\r\n    for (let i = 0; i < movedSnake.coordinates.length - 1; i++) {\r\n      const element: Point = movedSnake.coordinates[i];\r\n      if (pointsAreEqual(peekHeadCoordinate, element)) {\r\n        imminentDangers[actionId] = 1;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let sum: number = 0;\r\n  imminentDangers.forEach((isDangerous: number, index: number) => {\r\n    sum += isDangerous * Math.pow(2, imminentDangers.length - index - 1);\r\n  });\r\n\r\n  return sum;\r\n};\r\n","import * as React from \"react\";\r\nimport { Direction } from \"../../../types/Direction\";\r\nimport { isNumber } from \"util\";\r\nimport GameLogic from \"../../GameLogic/GameLogic\";\r\nimport {\r\n  takeGameStep,\r\n  generatePointPool,\r\n  initializeGame\r\n} from \"../../GameLogic/GameFunctions\";\r\nimport { GameState } from \"../../../types/GameState\";\r\nimport { State } from \"../../../types/State\";\r\nimport { Action } from \"../../../types/Action\";\r\nimport { Danger } from \"../../../types/Danger\";\r\nimport { StateActionPair } from \"../../../types/StateActionPair\";\r\nimport { mapActionToDirection, simplifyState } from \"./AlgorithmFunctions\";\r\nimport { testDanger, testDirection, testFoodDirection } from \"./Testing\";\r\nimport { FoodDirection } from \"../../../types/FoodDirection\";\r\nimport { TrainingProgress } from \"../../../types/TrainingProgress\";\r\nimport { Point } from \"../../../types/Point\";\r\n\r\nexport interface AlgorithmProps {\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n  paused: boolean;\r\n  score: number;\r\n  startGame: boolean;\r\n  updateScore: (increment: number) => void;\r\n  gameOver: (willAutoClose: boolean) => void;\r\n  gameStarted: () => void;\r\n  reportProgress: (progress: TrainingProgress) => void;\r\n}\r\n\r\nexport interface AlgorithmState {\r\n  gameState: GameState;\r\n  gameInitialized: boolean;\r\n  currentState: State;\r\n}\r\n\r\nexport default class Algorithm extends React.Component<AlgorithmProps, AlgorithmState> {\r\n  private Q: number[];\r\n  private Alpha: number; // Learning rate\r\n  private Gamma: number; // Discount factor\r\n  private Epsilon: number; // Epsilon greedy\r\n  private t: number; // Time\r\n\r\n  private TrainingIteration: number;\r\n  private CumulativeReward: number;\r\n  private CumulativeRewards: Point[];\r\n\r\n  private Actions: (string | Action)[];\r\n  private Dangers: (string | Danger)[];\r\n  private Directions: (string | Direction)[];\r\n  private FoodDirections: (string | FoodDirection)[];\r\n\r\n  private pointPool: number[];\r\n\r\n  private iterate: NodeJS.Timeout;\r\n  private gameRunning: boolean;\r\n\r\n  constructor(props: AlgorithmProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      gameState: initializeGame(),\r\n      currentState: {\r\n        Danger: Danger.NONE,\r\n        FoodDirection: FoodDirection.DOWN,\r\n        SnakeDirection: Direction.DOWN\r\n      },\r\n      gameInitialized: false\r\n    };\r\n\r\n    this.TrainingIteration = 0;\r\n    this.CumulativeReward = 0;\r\n    this.CumulativeRewards = [];\r\n\r\n    this.Alpha = 1.0;\r\n    this.Gamma = 0.8;\r\n    this.Epsilon = 0.0;\r\n    this.t = 0;\r\n    this.Q = [];\r\n    this.Actions = [];\r\n    this.Dangers = [];\r\n    this.Directions = [];\r\n    this.FoodDirections = [];\r\n    this.pointPool = generatePointPool(this.props.boardWidth, this.props.boardHeight);\r\n    this.iterate = setInterval(this.train, 50);\r\n    this.gameRunning = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Transform enumerations into number arrays\r\n    this.Actions = Object.values(Action).filter((value: string | Action) => {\r\n      return isNumber(value);\r\n    });\r\n    this.Dangers = Object.values(Danger).filter((value: string | Danger) => {\r\n      return isNumber(value);\r\n    });\r\n    this.Directions = Object.values(Direction).filter((value: string | Direction) => {\r\n      return isNumber(value);\r\n    });\r\n    this.FoodDirections = Object.values(FoodDirection).filter(\r\n      (value: string | FoodDirection) => {\r\n        return isNumber(value);\r\n      }\r\n    );\r\n\r\n    // Initialize Q\r\n    const permutations: number =\r\n      this.Actions.length *\r\n      this.Dangers.length *\r\n      this.Directions.length *\r\n      this.FoodDirections.length;\r\n    for (let i = 0; i < permutations; i++) {\r\n      this.Q.push(0.0);\r\n    }\r\n\r\n    console.log(\r\n      `Q size: ${this.Actions.length} x ${this.Dangers.length} x ${this.Directions.length} x ${this.FoodDirections.length} = ${permutations}`\r\n    );\r\n\r\n    // testDanger();\r\n    // testDirection();\r\n    // testFoodDirection(this.props.boardWidth, this.props.boardHeight);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.iterate);\r\n  }\r\n\r\n  train = () => {\r\n    if (this.props.paused) {\r\n      return;\r\n    }\r\n    const maxTurns: number = 10000;\r\n\r\n    if (this.props.startGame && !this.gameRunning) {\r\n      console.log(`Starting iteration #${this.TrainingIteration}`);\r\n      this.t = 0;\r\n      this.TrainingIteration++;\r\n\r\n      const newGame: GameState = initializeGame();\r\n      const inputDirection: Direction =\r\n        newGame.Snake.directions[newGame.Snake.directions.length - 1];\r\n\r\n      const currentState: State = simplifyState(\r\n        newGame,\r\n        inputDirection,\r\n        this.Actions,\r\n        this.props.boardWidth,\r\n        this.props.boardHeight\r\n      );\r\n\r\n      this.setState({\r\n        gameState: newGame,\r\n        currentState: currentState,\r\n        gameInitialized: true\r\n      });\r\n      this.props.gameStarted();\r\n      this.gameRunning = true;\r\n    }\r\n\r\n    if ((this.state.gameState.IsOver || this.t > maxTurns) && this.gameRunning) {\r\n      this.props.gameOver(true);\r\n      this.CumulativeRewards.push({\r\n        x: this.TrainingIteration - 1,\r\n        y: this.CumulativeReward / (this.TrainingIteration)\r\n      });\r\n      this.props.reportProgress({\r\n        CumulativeRewards: this.CumulativeRewards.map((r) => {return {x: r.x, y: r.y}}),\r\n        Iteration: this.TrainingIteration,\r\n        RandomChance: this.epsilonThreshold()\r\n      });\r\n      this.gameRunning = false;\r\n      console.log(\"Game over. Turns: \" + this.t + \". Score: \" + this.props.score);\r\n    } else if (this.gameRunning && this.state.gameInitialized) {\r\n      this.playSingleGame();\r\n    }\r\n  };\r\n\r\n  playSingleGame = async () => {\r\n    const { gameState, currentState } = this.state;\r\n\r\n    // console.log(\"Turn: \" + this.t);\r\n\r\n    // const action: Action = Action.RIGHT;\r\n    const action: Action = this.usePolicy(currentState);\r\n    const inputDirection = mapActionToDirection(action, currentState.SnakeDirection);\r\n\r\n    // console.log(`Turn #${this.t} Action = ${action} => ${inputDirection}`);\r\n\r\n    const newGameState: GameState = takeGameStep(\r\n      gameState,\r\n      inputDirection,\r\n      this.props.boardWidth,\r\n      this.props.boardHeight,\r\n      this.pointPool\r\n    );\r\n\r\n    const newState: State = simplifyState(\r\n      newGameState,\r\n      inputDirection,\r\n      this.Actions,\r\n      this.props.boardWidth,\r\n      this.props.boardHeight\r\n    );\r\n    const immediateReward: number = this.getReward(newGameState);\r\n\r\n    //Console.WriteLine($\"Moved from ({_CurrentState.X}, {_CurrentState.Y})[{action}] => ({newState.X}, {newState.Y}): {immediateReward}\");\r\n\r\n    this.UpdateQ(currentState, newState, action, immediateReward);\r\n\r\n    if (immediateReward !== 0) {\r\n      const reward: number = Math.pow(this.Gamma, this.t) * immediateReward;\r\n      this.CumulativeReward += reward;\r\n      // console.log(\r\n      //   \"Cumulative reward: \" + this.CumulativeReward / (this.TrainingIteration + 1)\r\n      // );\r\n    }\r\n\r\n    if (gameState.AddScore) {\r\n      this.props.updateScore(1);\r\n    }\r\n\r\n    this.t++;\r\n\r\n    this.setState({\r\n      gameState: newGameState,\r\n      currentState: newState\r\n    });\r\n  };\r\n\r\n  UpdateQ = (stateFrom: State, stateTo: State, a: Action, r: number) => {\r\n    const sa: StateActionPair = {\r\n      State: stateFrom,\r\n      Action: a\r\n    };\r\n\r\n    const oldValue: number = this.GetQValue(sa);\r\n\r\n    const optimalValue: number = Math.max(...this.GetQRewards(stateTo));\r\n    const x: number =\r\n      (1 - this.Alpha) * oldValue + this.Alpha * (r + this.Gamma * optimalValue);\r\n\r\n    this.SetQValue(sa, x);\r\n  };\r\n\r\n  GetQValue(sa: StateActionPair): number {\r\n    const qId = this.MapStateActionToId(sa);\r\n    // console.log(`Q[${qId}] = ${this.Q[qId]}`)\r\n    return this.Q[qId];\r\n  }\r\n\r\n  SetQValue(sa: StateActionPair, x: number) {\r\n    const qId = this.MapStateActionToId(sa);\r\n    this.Q[qId] = x;\r\n  }\r\n\r\n  MapStateActionToId = (sa: StateActionPair): number => {\r\n    const id: number =\r\n      sa.Action +\r\n      sa.State.Danger * this.Actions.length +\r\n      sa.State.SnakeDirection * this.Actions.length * this.Dangers.length +\r\n      sa.State.FoodDirection *\r\n        this.Actions.length *\r\n        this.Dangers.length *\r\n        this.Directions.length;\r\n    return id;\r\n  };\r\n\r\n  MapIdToState = (id: number): StateActionPair => {\r\n    const l0: number = this.Actions.length * this.Dangers.length * this.Directions.length;\r\n    const l1: number = this.Actions.length * this.Dangers.length;\r\n    const foodDir: FoodDirection = Math.floor(id / l0);\r\n    const snakeDir: Direction = Math.floor((id - foodDir * l0) / l1);\r\n    const danger: Danger = Math.floor(\r\n      (id - foodDir * l0 - snakeDir * l1) / this.Actions.length\r\n    );\r\n    const action: Action =\r\n      id - foodDir * l0 - snakeDir * l1 - danger * this.Actions.length;\r\n\r\n    return {\r\n      Action: action,\r\n      State: { Danger: danger, FoodDirection: foodDir, SnakeDirection: snakeDir }\r\n    };\r\n  };\r\n\r\n  GetQRewards = (stateTo: State): number[] => {\r\n    const rewards: number[] = new Array<number>();\r\n    for (let i = 0; i < this.Actions.length; i++) {\r\n      const action = this.Actions[i];\r\n      const sa: StateActionPair = { State: stateTo, Action: Number(action) };\r\n      rewards[i] = this.GetQValue(sa);\r\n    }\r\n\r\n    return rewards;\r\n  };\r\n\r\n  usePolicy = (state: State): Action => {\r\n    // const explore: boolean = Math.random() < this.Epsilon;\r\n    const explore: boolean = this.epsilonThreshold() > Math.random();\r\n    if (explore) {\r\n      const value: number = Math.round(Math.random() * this.Actions.length - 0.5);\r\n      return value;\r\n    } else {\r\n      const rewards: number[] = this.GetQRewards(state);\r\n      const value: number = Number(this.Actions[rewards.indexOf(Math.max(...rewards))]);\r\n      return value;\r\n    }\r\n  };\r\n\r\n  epsilonThreshold(): number {\r\n    const epsilonFade: number = Math.pow(0.8, this.TrainingIteration);\r\n    return this.Epsilon + (1 - this.Epsilon) * epsilonFade;\r\n  }\r\n\r\n  getReward = (gameState: GameState): number => {\r\n    if (gameState.AddScore) {\r\n      return 1;\r\n    } else if (gameState.IsOver) {\r\n      return -5;\r\n    }\r\n    return -0.01;\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <GameLogic\r\n        boardHeight={this.props.boardHeight}\r\n        boardWidth={this.props.boardWidth}\r\n        updateScore={this.props.updateScore}\r\n        gameOver={() => this.props.gameOver(true)}\r\n        paused={false}\r\n        start={false}\r\n        humanControlled={false}\r\n        aiGameState={this.state.gameState}\r\n        gameStarted={() => {}}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import \"./GameUI.css\";\r\nimport * as React from \"react\";\r\nimport GameLogic from \"../GameLogic/GameLogic\";\r\nimport ParameterInput from \"./ParameterInput\";\r\nimport Card from \"../Card/Card\";\r\nimport GameOverModal from \"./GameOverModal/GameOverModal\";\r\nimport TabButton from \"./TabButton/TabButton\";\r\nimport TrainingUI from \"../MachineLearning/TrainingUI/TrainingUI\";\r\nimport Algorithm from \"../MachineLearning/QLearning/Algorithm\";\r\nimport { TrainingProgress } from \"../../types/TrainingProgress\";\r\n\r\nexport interface GameUIProps {}\r\n\r\nexport interface GameUIState {\r\n  paused: boolean;\r\n  boardWidth: number;\r\n  boardHeight: number;\r\n  gameSpeed: number;\r\n  selectedTab: number;\r\n  score: number;\r\n  highScore: number;\r\n  gameOver: boolean;\r\n  startGame: boolean;\r\n  trainingInfo: TrainingProgress;\r\n}\r\n\r\nexport default class GameUI extends React.Component<GameUIProps, GameUIState> {\r\n  constructor(props: GameUIProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      paused: true,\r\n      boardWidth: 10,\r\n      boardHeight: 10,\r\n      gameSpeed: 100,\r\n      selectedTab: 0,\r\n      score: 0,\r\n      highScore: 0,\r\n      gameOver: false,\r\n      startGame: false,\r\n      trainingInfo: { CumulativeRewards: [], Iteration: 0, RandomChance: 0 }\r\n    };\r\n  }\r\n\r\n  updateScore = (increment: number) => {\r\n    this.setState({\r\n      score: this.state.score + increment\r\n    });\r\n  };\r\n\r\n  startNewGame = (startPaused: boolean) => {\r\n    if (this.state.score > this.state.highScore) {\r\n      this.setState({ highScore: this.state.score });\r\n    }\r\n    this.setState({\r\n      score: 0,\r\n      gameOver: false,\r\n      startGame: true,\r\n      paused: startPaused\r\n    });\r\n  };\r\n\r\n  gameOver = (willAutoClose: boolean) => {\r\n    this.setState({\r\n      gameOver: true\r\n    });\r\n    if (willAutoClose) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          gameOver: false\r\n        });\r\n        this.startNewGame(false);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  gridWidthChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const width: number = parseInt(event.target.value);\r\n    const widthMin: number = 5;\r\n    const widthMax: number = 40;\r\n    if (widthMin < width && width < widthMax) {\r\n      this.setState({\r\n        boardWidth: width\r\n      });\r\n    } else {\r\n      alert(`Width must be in range (${widthMin}, ${widthMax})`);\r\n    }\r\n  };\r\n\r\n  gridHeightChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const height: number = parseInt(event.target.value);\r\n    const heightMin: number = 5;\r\n    const heightMax: number = 40;\r\n    if (heightMin < height && height < heightMax) {\r\n      this.setState({\r\n        boardHeight: height\r\n      });\r\n    } else {\r\n      alert(`Height must be in range (${heightMin}, ${heightMax})`);\r\n    }\r\n  };\r\n\r\n  gameSpeedChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const gameSpeed: number = parseInt(event.target.value);\r\n    const gameSpeedMin: number = 50;\r\n    const gameSpeedMax: number = 1000;\r\n    if (gameSpeedMin < gameSpeed && gameSpeed < gameSpeedMax) {\r\n      this.setState({\r\n        gameSpeed: gameSpeed\r\n      });\r\n    } else {\r\n      alert(`Game speed must be in range (${gameSpeedMin}, ${gameSpeedMax})`);\r\n    }\r\n  };\r\n\r\n  renderTab = (): JSX.Element => {\r\n    switch (this.state.selectedTab) {\r\n      case 0:\r\n      case 2:\r\n        return this.renderGame();\r\n      case 1:\r\n        return this.renderSettings();\r\n      default:\r\n        return <div />;\r\n    }\r\n  };\r\n\r\n  renderGame = (): JSX.Element => {\r\n    return (\r\n      <div className=\"game-view\">\r\n        <div className=\"game-controls\">\r\n          <Card className=\"game-controls__card\">\r\n            <div className=\"control-buttons\">\r\n              <button\r\n                className=\"game-controls__btn\"\r\n                onClick={() => this.setState({ paused: false })}\r\n              >\r\n                Continue\r\n              </button>\r\n              <button\r\n                className=\"game-controls__btn\"\r\n                onClick={() => this.setState({ paused: true })}\r\n              >\r\n                Pause\r\n              </button>\r\n            </div>\r\n            <div className=\"game-scores\">\r\n              <label className=\"game-scores__label\">Score: {this.state.score}</label>\r\n              <label className=\"game-scores__label\">\r\n                High score: {this.state.highScore}\r\n              </label>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n        <div className=\"game-board\">\r\n          <Card className=\"game-board__card\">\r\n            {this.state.paused ? <p className=\"pause-text\">Game paused</p> : null}\r\n            {this.state.gameOver ? (\r\n              <GameOverModal\r\n                score={this.state.score}\r\n                highScore={this.state.highScore}\r\n                closeHandler={() => this.startNewGame(true)}\r\n              />\r\n            ) : null}\r\n            {this.renderGameLogic()}\r\n          </Card>\r\n        </div>\r\n        <div className=\"game-ai-info\">\r\n          {this.state.selectedTab === 2 ? (\r\n            <Card className=\"game-ai-info__card\">\r\n              <TrainingUI trainingInfo={this.state.trainingInfo} />\r\n            </Card>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderGameLogic = (): JSX.Element => {\r\n    // console.log(\"Selected tab: \" + this.state.selectedTab);\r\n    if (this.state.selectedTab === 0) {\r\n      return (\r\n        <GameLogic\r\n          boardWidth={this.state.boardWidth}\r\n          boardHeight={this.state.boardHeight}\r\n          paused={this.state.paused}\r\n          updateScore={this.updateScore}\r\n          gameOver={this.gameOver}\r\n          start={this.state.startGame}\r\n          humanControlled={true}\r\n          gameStarted={() => this.setState({ startGame: false })}\r\n        />\r\n      );\r\n    } else if (this.state.selectedTab === 2) {\r\n      return (\r\n        <Algorithm\r\n          boardHeight={this.state.boardHeight}\r\n          boardWidth={this.state.boardWidth}\r\n          gameOver={this.gameOver}\r\n          updateScore={this.updateScore}\r\n          paused={this.state.paused}\r\n          score={this.state.score}\r\n          startGame={this.state.startGame}\r\n          gameStarted={() => this.setState({ startGame: false })}\r\n          reportProgress={(progress: TrainingProgress) =>\r\n            this.setState({ trainingInfo: progress })\r\n          }\r\n        />\r\n      );\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  };\r\n\r\n  renderSettings = (): JSX.Element => {\r\n    return (\r\n      <div className=\"game-settings\">\r\n        <Card>\r\n          <ParameterInput\r\n            labelText=\"Grid width:\"\r\n            onTextChangeHandler={this.gridWidthChangeHandler}\r\n            value={this.state.boardWidth.toString()}\r\n          />\r\n          <ParameterInput\r\n            labelText=\"Grid height:\"\r\n            onTextChangeHandler={this.gridHeightChangeHandler}\r\n            value={this.state.boardHeight.toString()}\r\n          />\r\n          <ParameterInput\r\n            labelText=\"Game speed:\"\r\n            onTextChangeHandler={this.gameSpeedChangeHandler}\r\n            value={this.state.gameSpeed.toString()}\r\n          />\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"ui\">\r\n        <div className=\"ui__tab\">{this.renderTab()}</div>\r\n        <div className=\"nav\">\r\n          <Card>\r\n            <div className=\"nav__buttons\">\r\n              <TabButton\r\n                id={0}\r\n                selectedId={this.state.selectedTab}\r\n                onClick={() => this.setState({ selectedTab: 0 })}\r\n                src=\"home_icon-icons.com_73532.png\"\r\n              />\r\n              {/* <TabButton\r\n                id={1}\r\n                selectedId={this.state.selectedTab}\r\n                onClick={() => this.setState({ selectedTab: 1 })}\r\n                src=\"cog-4-512.png\"\r\n              /> */}\r\n              <TabButton\r\n                id={2}\r\n                selectedId={this.state.selectedTab}\r\n                onClick={() =>\r\n                  this.setState({ selectedTab: 2, paused: false, startGame: true })\r\n                }\r\n                src=\"Robot-icon-by-ahlangraphic-580x386.jpg\"\r\n              />\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameUI from \"./components/GameUI/GameUI\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <GameUI />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}